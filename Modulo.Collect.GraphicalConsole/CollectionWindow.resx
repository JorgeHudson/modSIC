<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAAAAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9/n8Aejv9w/p8fsY6vL9E/n8/wMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK3I5j81dL3FP4Tb2UaP6tGny/dgAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYu+BjEFux/h1u0/8jeeT/hrf0jQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmbziYRJftvsfctj/Jn3p/3Sl
        4aTT09M209PTNuTk5CH6+voH6enpIefn5yPj4+Qn6OjoIuvr6x7///8BAAAAAKfB4F4ja8L6I3PX/yd2
        2P8yV4X5PDs68T8/P/FoaGi5ra2uZpSVloyHh4eeY2Jez4+PkJKYmJmHtbW2XN7e3im6u71YO0JM+TQ+
        TP87RE//ODo8/zQ0NP87Ozv/Pz05/09IN/xSSzj6V041+2ZWK/5UTDf6Uks4+kxGOPyioaB7vr6+WExL
        S/lIR0b/SUhH/0dHR/9ISEj/RkZI/1VLNP+eeRT/sIcP/7mPDf+8kgz/to0O/6yDEP+Pbxr/raiefMDA
        wFhVVVX5UlJS/1BQUP9QUFD/UlJS/01OT/9cUTX/uZMm/9WyP//gvUH/5MBD/967R//QrD3/pIIi/7Gs
        oHzDw8NYXV1d+VpaWv9ZWVn/WFhZ/1paWv9WVlj/ZFk8/8CbKf/gvUb/78o///fXWv/v02//3r9a/6uJ
        J/+0r6N8x8bEWHJqU/llY17/YmJi/21lUP9nZFz/YWJk/29kSP+1iwr/z6EC/+OyAP/qugL/3a4H/8mc
        Cv+lgBf/t7KmfsjHxFl9b0n8aWZe/2ZmZf94a0f/bGda/2ZnaP99eW/kqJhqw7CeaMO1o2jDtqRnw7Oh
        aMOunGjDo5Vvw8rIw1/n5+Yov768cb69vXS9vb1zvb27dL69vXS/v79w3+DgMvj5+wv4+fwL+Pn8C/j5
        /Av4+fwL+Pn8C/n6+wv8/f0FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA//8AAP//AACP/wAAh/8AAIf/AACAgwAAgAEAAIAB
        AACAAQAAgAEAAIABAACAAQAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAAAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADr8fgB7PL5DO3z+xPt9PwU7fT9Ee71/gcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAjLPfMy9ts5k5eMDDQ4XY0UiN5NNIjuXNT5fwtYu7923z9/0LAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABdldOUA0+k/xBctP8ba8//IXTd/yF13v8rgev/OYvv7NHi+CwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF6V05kHUqb/E161/x1tz/8jdd3/I3be/yyB6f83iOvtzuH3MAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXZTTmQVQpP8SXbT/HW3Q/yN23v8kd9//LoPs/zmL
        7u3P4fgvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeldOZB1Kn/xNetf8dbc//InXc/yN2
        3f8sgOn/OIjr7dHk+ywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF2U0pkFUKP/E121/x5u
        0f8kd+D/JHjh/y6E7f82h+nzmqzBcry8u1G8vLxRvLy8Ub29vVG9vb1R4+PjHgAAAADo6Ogg1NTUOtXV
        1TrV1dU61tbWOdjY2DbX19c41dXVOtXV1TrV1dU62dnZNvj4+AkAAAAAAAAAAAAAAAAAAAAAYp3hmBNr
        0/8ed+P/IX3u/yOA8/8jgPL/KIX3/yt/5v8xQVX9MzIx/DMzM/w0NDT8PT09/DU1NfupqalbAAAAANLS
        0kOqqqp9rKysfaysrH2WlpaYUFBQ72xsbM2rq6t+rKysfaurq32zs7Ny8vLyEwAAAAAAAAAAAAAAAAAA
        AACCoMaPI2a6/yNy1P8iddv/InXb/yN12f8ncc3/Kl6d/y82P/8wMC//MDAw/zIyMv8/Pz//MzMz/2Bg
        YL2EhISXhYWFloaGhpWGhoaVhoaGlXJyca44NS/9Tk1K3oWFhZaGhoaVhoaGlYWFhZWEhISWgoKCl6Cg
        oHT4+PgIAAAAAJWUk4kyNDf/MThB/zE6Rv8wOkb/Nj5J/z9ESv83Nzf/MjIx/zIyMv8yMjL/NDQ0/0FB
        Qf82Njb/NTU2/zMzNf8zMzX/MzM1/zMzNf8zMzX/OTYy/21cJP9SRyv/MjM1/zMzNf8zMzX/MzM1/zMz
        Nf8wMTL/YmJjyPT09A4AAAAAlpaWiTc3N/83Njb/NzY2/zc2Nf88PDv/RERD/zw8PP83Nzf/Nzc3/zc3
        N/85OTn/RERE/zc4OP9IRDv/WU85/1lQOf9aUDn/W1E5/1tROP9eUzf/dWEt/2lZMv9bUTj/W1E5/1pQ
        Of9aUDn/WU85/1FJN/9ramnF9PT0DgAAAACYmJiJQkJC/0ZGRv9GRkb/RkZG/0dHR/9HR0f/RUVF/0ZG
        Rv9GRkb/RkZG/0ZGRv9ISEj/ODk6/2NTLv+ddRP/pH0S/6uCEf+whxD/tIoQ/7eND/+3jg//t40P/7WL
        EP+xiBD/rIMR/6Z+Ev+geRP/hmUZ/3NwaMX09fUOAAAAAJqamolHR0f/S0tL/0tLS/9LS0v/TExM/0pK
        Sv9JSUn/S0tL/0tLS/9LS0v/S0tL/0tLS/86Ojz/aVcu/6h+Df+yiAz/uo8K/8GVCf/Hmgj/y54I/82f
        B//Mngj/yJsI/8OWCf+8kAr/tIkM/62CDf+NaxX/dnNrxfX19Q4AAAAAnJyciUtLS/9PT0//T09P/09P
        T/9QUFD/TU1N/0xMTP9PT0//T09P/09PT/9QUFD/TU1N/zs8Pv9sWzD/roQN/7qQEP/DmA//y58N/9Km
        D//WqQv/2awP/9eqDf/UqBL/zaEO/8WZDf++lBb/tIoQ/5JvFf95dm7F9fX2DgAAAACenp6JUFBQ/1RU
        VP9UVFT/VFRU/1VVVf9QUFD/UVFR/1RUVP9UVFT/VFRU/1VVVf9QUFD/PT0//3BfM/+0ihH/1Ldd/9u+
        Xv/kyW7/6s9x/+3Sc//v02//7tR3/+zRdP/p0YH/4MVs/9q/bP/FoTj/lXIU/315ccX19fYOAAAAAKCg
        oIlUVFT/WFhY/1hYWP9YWFj/WVlZ/1NTU/9VVVX/WFhY/1hYWP9YWFj/WVlZ/1NTU/9AQUP/c2I1/7eN
        EP/awGv/5c1+/+vSfP/v027/9dl0//fcdv/345j/892O//Dbk//t257/0rBC/8KaIf+YdRX/f3x0xfX2
        9g4AAAAAoqKiiVhYWP9cXFz/XFxc/1xcXP9dXV3/WVlZ/1lZWf9cXFz/XFxc/1xcXP9cXFz/Wlpa/0pL
        Tf92ZTj/uIwL/8ebEf/SphP/3a8N/+e4DP/xwQf/+csX//jVUf/y02L/6MVM/968R//bvl7/yKIw/5p2
        Ff+Cf3fF9vb3DgAAAACkpKSJX11Z/2NgWv9hYGD/YGBg/2FhYf9fX1//Xl1b/2RgWv9hYF//YGBg/2Bg
        YP9iYmL/VVZY/3lnOv+3jAv/xZgJ/9CiB//brAb/5rUE//C+Av/2xAH/8sAA/+i3Av/drgT/0qQF/8ea
        CP+9kAn/m3cX/4WCesX29vcOAAAAAKampol1Z0T/iHQ5/2dkXv9kZGX/ZWVl/2RlZf9sY0//jHc1/21m
        Vv9kZGX/ZGRk/2lpaf9gYWP/e2o8/7aKCv/Dlgn/zqAH/9ipBf/isQT/6bgC/+27Av/ruQL/5LMD/9ur
        Bf/Qogb/xpkI/7yPCf+bdxf/iYV9xfb29w4AAAAAp6emiXxqPP+SeS3/amZd/2ZmZv9nZ2f/Zmdo/3Fl
        S/+Xeyj/cWhT/2ZmZ/9mZmb/bGxs/2ZmaP9zZkj/knMi/5l6If+efiH/o4Mg/6eHH/+riR7/rIse/6uK
        Hv+ohx//pIQg/59/IP+aeyH/lXYh/4NpKv+JhoDI9vf3DgAAAACmpqaLb2RK/31tQf9mZF//ZGRk/2Vl
        Zf9lZWX/aWJT/4BuPv9qZVn/ZGRl/2RkZP9qamr/aWlp/5KSkb2pqKWfqaimn6mnpp+pp6afqKemn6in
        pp+op6afqKemn6inpp+pp6afqaemn6mnpp+pqKWfqKeln7y8vHr6+voJAAAAALm5uXGFhITSiIeG0oiI
        iNKIiIjSiYmJ0oeHh9GEhITSiIeG0oiIh9KIiIjSiIiI0oyMjMyqqqp+7+/vFQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+fn5Cvb2
        9hP29vYT9vb2E/b29hP29vYT9fX1EvX19RP29vYT9vb2E/b29hP29vYT9vb2EAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////////A////gH///4B/
        //+Af///gH///4B///+AAfj/gAAAA4AAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAA8AD////////////////////////
</value>
  </data>
</root>