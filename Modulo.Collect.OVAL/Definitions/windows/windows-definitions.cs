// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.5.0.14890
//    <NameSpace>Modulo.Collect.OVAL.Definitions.Windows</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings>Modulo.Collect.OVAL.Common;Modulo.Collect.OVAL.Definitions</CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Modulo.Collect.OVAL.Definitions.Windows {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Modulo.Collect.OVAL.Common;
    using Modulo.Collect.OVAL.Definitions;
    
    
    /// <summary>
    /// The accesstoken_test is used to check the properties of a Windows access token as well as individual privileges and rights associated with it. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an accesstoken_object and the optional state element specifies the data to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class accesstoken_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// An accesstoken_object consists of a single security principle that identifies user, group, or computer account that is associated with the token.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class accesstoken_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(AccesstokenBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("security_principle", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class AccesstokenBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public AccesstokenBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateWindowsViewType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateCmdletVerbType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateGUIDType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateSharedResourceTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateServiceTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateServiceStartTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateServiceCurrentStateType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateServiceControlsAcceptedType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateRegistryTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateRegistryHiveType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateProtocolType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStatePeSubsystemType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStatePeTargetMachineType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateNamingContextType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateFileTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateInterfaceTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateDriveTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateAuditType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateAdstypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityStateAddrTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityObjectCmdletVerbType : EntityObjectStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityObjectGUIDType : EntityObjectStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityObjectRegistryHiveType : EntityObjectStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityObjectProtocolType : EntityObjectStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class EntityObjectNamingContextType : EntityObjectStringType {
    }
    
    /// <summary>
    /// The accesstoken_state element defines the different information that can be used to evaluate the specified access tokens. This includes the multitude of user rights and permissions that can be granted. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class accesstoken_state : StateType {
        
        private EntityStateStringType security_principleField;
        
        private EntityStateBoolType seassignprimarytokenprivilegeField;
        
        private EntityStateBoolType seauditprivilegeField;
        
        private EntityStateBoolType sebackupprivilegeField;
        
        private EntityStateBoolType sechangenotifyprivilegeField;
        
        private EntityStateBoolType secreateglobalprivilegeField;
        
        private EntityStateBoolType secreatepagefileprivilegeField;
        
        private EntityStateBoolType secreatepermanentprivilegeField;
        
        private EntityStateBoolType secreatesymboliclinkprivilegeField;
        
        private EntityStateBoolType secreatetokenprivilegeField;
        
        private EntityStateBoolType sedebugprivilegeField;
        
        private EntityStateBoolType seenabledelegationprivilegeField;
        
        private EntityStateBoolType seimpersonateprivilegeField;
        
        private EntityStateBoolType seincreasebasepriorityprivilegeField;
        
        private EntityStateBoolType seincreasequotaprivilegeField;
        
        private EntityStateBoolType seincreaseworkingsetprivilegeField;
        
        private EntityStateBoolType seloaddriverprivilegeField;
        
        private EntityStateBoolType selockmemoryprivilegeField;
        
        private EntityStateBoolType semachineaccountprivilegeField;
        
        private EntityStateBoolType semanagevolumeprivilegeField;
        
        private EntityStateBoolType seprofilesingleprocessprivilegeField;
        
        private EntityStateBoolType serelabelprivilegeField;
        
        private EntityStateBoolType seremoteshutdownprivilegeField;
        
        private EntityStateBoolType serestoreprivilegeField;
        
        private EntityStateBoolType sesecurityprivilegeField;
        
        private EntityStateBoolType seshutdownprivilegeField;
        
        private EntityStateBoolType sesyncagentprivilegeField;
        
        private EntityStateBoolType sesystemenvironmentprivilegeField;
        
        private EntityStateBoolType sesystemprofileprivilegeField;
        
        private EntityStateBoolType sesystemtimeprivilegeField;
        
        private EntityStateBoolType setakeownershipprivilegeField;
        
        private EntityStateBoolType setcbprivilegeField;
        
        private EntityStateBoolType setimezoneprivilegeField;
        
        private EntityStateBoolType seundockprivilegeField;
        
        private EntityStateBoolType seunsolicitedinputprivilegeField;
        
        private EntityStateBoolType sebatchlogonrightField;
        
        private EntityStateBoolType seinteractivelogonrightField;
        
        private EntityStateBoolType senetworklogonrightField;
        
        private EntityStateBoolType seremoteinteractivelogonrightField;
        
        private EntityStateBoolType seservicelogonrightField;
        
        private EntityStateBoolType sedenybatchLogonrightField;
        
        private EntityStateBoolType sedenyinteractivelogonrightField;
        
        private EntityStateBoolType sedenynetworklogonrightField;
        
        private EntityStateBoolType sedenyremoteInteractivelogonrightField;
        
        private EntityStateBoolType sedenyservicelogonrightField;
        
        private EntityStateBoolType setrustedcredmanaccessnamerightField;
        
        /// <summary>
        /// The security_principle element identifies an access token to test for. Security principles include users or groups with either local or domain accounts, and computer accounts created when a computer joins a domain. In Windows, security principles are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. User rights and permissions to access objects such as Active Directory objects, files, and registry settings are assigned to security principles. In a domain environment, security principles should be identified in the form: "domain\trustee name". For local security principles use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType security_principle {
            get {
                return this.security_principleField;
            }
            set {
                this.security_principleField = value;
            }
        }
        
        /// <summary>
        /// If the seassignprimarytokenprivilege privilege is enabled, it allows a parent process to replace the access token that is associated with a child process.
        /// </summary>
        public EntityStateBoolType seassignprimarytokenprivilege {
            get {
                return this.seassignprimarytokenprivilegeField;
            }
            set {
                this.seassignprimarytokenprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seauditprivilege privilege is enabled, it allows a process to generate audit records in the security log. The security log can be used to trace unauthorized system access.
        /// </summary>
        public EntityStateBoolType seauditprivilege {
            get {
                return this.seauditprivilegeField;
            }
            set {
                this.seauditprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sebackupprivilege privilege is enabled, it allows the user to circumvent file and directory permissions to back up the system. The privilege is selected only when an application attempts access by using the NTFS backup application programming interface (API). Otherwise, normal file and directory permissions apply.
        /// </summary>
        public EntityStateBoolType sebackupprivilege {
            get {
                return this.sebackupprivilegeField;
            }
            set {
                this.sebackupprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sechangenotifyprivilege privilege is enabled, it allows the user to pass through folders to which the user otherwise has no access while navigating an object path in the NTFS file system or in the registry. This privilege does not allow the user to list the contents of a folder; it allows the user only to traverse its directories.
        /// </summary>
        public EntityStateBoolType sechangenotifyprivilege {
            get {
                return this.sechangenotifyprivilegeField;
            }
            set {
                this.sechangenotifyprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the secreateglobalprivilege privilege is enabled, it allows the user to create named file mapping objects in the global namespace during Terminal Services sessions.
        /// </summary>
        public EntityStateBoolType secreateglobalprivilege {
            get {
                return this.secreateglobalprivilegeField;
            }
            set {
                this.secreateglobalprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the secreatepagefileprivilege privilege is enabled, it allows the user to create and change the size of a pagefile.
        /// </summary>
        public EntityStateBoolType secreatepagefileprivilege {
            get {
                return this.secreatepagefileprivilegeField;
            }
            set {
                this.secreatepagefileprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the secreatepermanentprivilege privilege is enabled, it allows a process to create a directory object in the object manager. It is useful to kernel-mode components that extend the object namespace. Components that are running in kernel mode have this privilege inherently.
        /// </summary>
        public EntityStateBoolType secreatepermanentprivilege {
            get {
                return this.secreatepermanentprivilegeField;
            }
            set {
                this.secreatepermanentprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the secreatesymboliclinkprivilege privilege is enabled, it allows users to create symbolic links.
        /// </summary>
        public EntityStateBoolType secreatesymboliclinkprivilege {
            get {
                return this.secreatesymboliclinkprivilegeField;
            }
            set {
                this.secreatesymboliclinkprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the secreatetokenprivilege privilege is enabled, it allows a process to create an access token by calling NtCreateToken() or other token-creating APIs.
        /// </summary>
        public EntityStateBoolType secreatetokenprivilege {
            get {
                return this.secreatetokenprivilegeField;
            }
            set {
                this.secreatetokenprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sedebugprivilege privilege is enabled, it allows the user to attach a debugger to any process. It provides access to sensitive and critical operating system components.
        /// </summary>
        public EntityStateBoolType sedebugprivilege {
            get {
                return this.sedebugprivilegeField;
            }
            set {
                this.sedebugprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seenabledelegationprivilege privilege is enabled, it allows the user to change the Trusted for Delegation setting on a user or computer object in Active Directory. The user or computer that is granted this privilege must also have write access to the account control flags on the object.
        /// </summary>
        public EntityStateBoolType seenabledelegationprivilege {
            get {
                return this.seenabledelegationprivilegeField;
            }
            set {
                this.seenabledelegationprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seimpersonateprivilege privilege is enabled, it allows the user to impersonate a client after authentication.
        /// </summary>
        public EntityStateBoolType seimpersonateprivilege {
            get {
                return this.seimpersonateprivilegeField;
            }
            set {
                this.seimpersonateprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seincreasebasepriorityprivilege privilege is enabled, it allows a user to increase the base priority class of a process.
        /// </summary>
        public EntityStateBoolType seincreasebasepriorityprivilege {
            get {
                return this.seincreasebasepriorityprivilegeField;
            }
            set {
                this.seincreasebasepriorityprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seincreasequotaprivilege privilege is enabled, it allows a process that has access to a second process to increase the processor quota assigned to the second process.
        /// </summary>
        public EntityStateBoolType seincreasequotaprivilege {
            get {
                return this.seincreasequotaprivilegeField;
            }
            set {
                this.seincreasequotaprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seincreaseworkingsetprivilege privilege is enabled, it allows a user to increase a process working set.
        /// </summary>
        public EntityStateBoolType seincreaseworkingsetprivilege {
            get {
                return this.seincreaseworkingsetprivilegeField;
            }
            set {
                this.seincreaseworkingsetprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seloaddriverprivilege privilege is enabled, it allows a user to install and remove drivers for Plug and Play devices.
        /// </summary>
        public EntityStateBoolType seloaddriverprivilege {
            get {
                return this.seloaddriverprivilegeField;
            }
            set {
                this.seloaddriverprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the selockmemoryprivilege privilege is enabled, it allows a process to keep data in physical memory, which prevents the system from paging the data to virtual memory on disk.
        /// </summary>
        public EntityStateBoolType selockmemoryprivilege {
            get {
                return this.selockmemoryprivilegeField;
            }
            set {
                this.selockmemoryprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the semachineaccountprivilege privilege is enabled, it allows the user to add a computer to a specific domain.
        /// </summary>
        public EntityStateBoolType semachineaccountprivilege {
            get {
                return this.semachineaccountprivilegeField;
            }
            set {
                this.semachineaccountprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the semanagevolumeprivilege privilege is enabled, it allows a non-administrative or remote user to manage volumes or disks.
        /// </summary>
        public EntityStateBoolType semanagevolumeprivilege {
            get {
                return this.semanagevolumeprivilegeField;
            }
            set {
                this.semanagevolumeprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seprofilesingleprocessprivilege privilege is enabled, it allows a user to sample the performance of an application process.
        /// </summary>
        public EntityStateBoolType seprofilesingleprocessprivilege {
            get {
                return this.seprofilesingleprocessprivilegeField;
            }
            set {
                this.seprofilesingleprocessprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the serelabelprivilege privilege is enabled, it allows a user to modify an object label.
        /// </summary>
        public EntityStateBoolType serelabelprivilege {
            get {
                return this.serelabelprivilegeField;
            }
            set {
                this.serelabelprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seremoteshutdownprivilege privilege is enabled, it allows a user to shut down a computer from a remote location on the network.
        /// </summary>
        public EntityStateBoolType seremoteshutdownprivilege {
            get {
                return this.seremoteshutdownprivilegeField;
            }
            set {
                this.seremoteshutdownprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the serestoreprivilege privilege is enabled, it allows a user to circumvent file and directory permissions when restoring backed-up files and directories and to set any valid security principle as the owner of an object.
        /// </summary>
        public EntityStateBoolType serestoreprivilege {
            get {
                return this.serestoreprivilegeField;
            }
            set {
                this.serestoreprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sesecurityprivilege privilege is enabled, it allows a user to specify object access auditing options for individual resources such as files, Active Directory objects, and registry keys. A user who has this privilege can also view and clear the security log from Event Viewer.
        /// </summary>
        public EntityStateBoolType sesecurityprivilege {
            get {
                return this.sesecurityprivilegeField;
            }
            set {
                this.sesecurityprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seshutdownprivilege privilege is enabled, it allows a user to shut down the local computer.
        /// </summary>
        public EntityStateBoolType seshutdownprivilege {
            get {
                return this.seshutdownprivilegeField;
            }
            set {
                this.seshutdownprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sesyncagentprivilege privilege is enabled, it allows a process to read all objects and properties in the directory, regardless of the protection on the objects and properties. It is required in order to use Lightweight Directory Access Protocol (LDAP) directory synchronization (Dirsync) services.
        /// </summary>
        public EntityStateBoolType sesyncagentprivilege {
            get {
                return this.sesyncagentprivilegeField;
            }
            set {
                this.sesyncagentprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sesystemenvironmentprivilege privilege is enabled, it allows modification of system environment variables either by a process through an API or by a user through System Properties.
        /// </summary>
        public EntityStateBoolType sesystemenvironmentprivilege {
            get {
                return this.sesystemenvironmentprivilegeField;
            }
            set {
                this.sesystemenvironmentprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sesystemprofileprivilege privilege is enabled, it allows a user to sample the performance of system processes.
        /// </summary>
        public EntityStateBoolType sesystemprofileprivilege {
            get {
                return this.sesystemprofileprivilegeField;
            }
            set {
                this.sesystemprofileprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the sesystemtimeprivilege privilege is enabled, it allows the user to adjust the time on the computer's internal clock. It is not required to change the time zone or other display characteristics of the system time.
        /// </summary>
        public EntityStateBoolType sesystemtimeprivilege {
            get {
                return this.sesystemtimeprivilegeField;
            }
            set {
                this.sesystemtimeprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the setakeownershipprivilege privilege is enabled, it allows a user to take ownership of any securable object in the system, including Active Directory objects, NTFS files and folders, printers, registry keys, services, processes, and threads.
        /// </summary>
        public EntityStateBoolType setakeownershipprivilege {
            get {
                return this.setakeownershipprivilegeField;
            }
            set {
                this.setakeownershipprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the setcbprivilege privilege is enabled, it allows a process to assume the identity of any user and thus gain access to the resources that the user is authorized to access.
        /// </summary>
        public EntityStateBoolType setcbprivilege {
            get {
                return this.setcbprivilegeField;
            }
            set {
                this.setcbprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the setimezoneprivilege privilege is enabled, it allows the user to change the time zone.
        /// </summary>
        public EntityStateBoolType setimezoneprivilege {
            get {
                return this.setimezoneprivilegeField;
            }
            set {
                this.setimezoneprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seundockprivilege privilege is enabled, it allows the user of a portable computer to undock the computer by clicking Eject PC on the Start menu.
        /// </summary>
        public EntityStateBoolType seundockprivilege {
            get {
                return this.seundockprivilegeField;
            }
            set {
                this.seundockprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If the seunsolicitedinputprivilege privilege is enabled, it allows the user to read unsolicited data from a terminal device.
        /// </summary>
        public EntityStateBoolType seunsolicitedinputprivilege {
            get {
                return this.seunsolicitedinputprivilegeField;
            }
            set {
                this.seunsolicitedinputprivilegeField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the sebatchlogonright right, it can log on using the batch logon type.
        /// </summary>
        public EntityStateBoolType sebatchlogonright {
            get {
                return this.sebatchlogonrightField;
            }
            set {
                this.sebatchlogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the seinteractivelogonright right, it can log on using the interactive logon type.
        /// </summary>
        public EntityStateBoolType seinteractivelogonright {
            get {
                return this.seinteractivelogonrightField;
            }
            set {
                this.seinteractivelogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the senetworklogonright right, it can log on using the network logon type.
        /// </summary>
        public EntityStateBoolType senetworklogonright {
            get {
                return this.senetworklogonrightField;
            }
            set {
                this.senetworklogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the seremoteinteractivelogonright right, it can log on to the computer by using a Remote Desktop connection.
        /// </summary>
        public EntityStateBoolType seremoteinteractivelogonright {
            get {
                return this.seremoteinteractivelogonrightField;
            }
            set {
                this.seremoteinteractivelogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the seservicelogonright right, it can log on using the service logon type.
        /// </summary>
        public EntityStateBoolType seservicelogonright {
            get {
                return this.seservicelogonrightField;
            }
            set {
                this.seservicelogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the sedenybatchLogonright right, it is explicitly denied the ability to log on using the batch logon type.
        /// </summary>
        public EntityStateBoolType sedenybatchLogonright {
            get {
                return this.sedenybatchLogonrightField;
            }
            set {
                this.sedenybatchLogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the sedenyinteractivelogonright right, it is explicitly denied the ability to log on using the interactive logon type.
        /// </summary>
        public EntityStateBoolType sedenyinteractivelogonright {
            get {
                return this.sedenyinteractivelogonrightField;
            }
            set {
                this.sedenyinteractivelogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the sedenynetworklogonright right, it is explicitly denied the ability to log on using the network logon type.
        /// </summary>
        public EntityStateBoolType sedenynetworklogonright {
            get {
                return this.sedenynetworklogonrightField;
            }
            set {
                this.sedenynetworklogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the sedenyremoteInteractivelogonright right, it is explicitly denied the ability to log on through Terminal Services.
        /// </summary>
        public EntityStateBoolType sedenyremoteInteractivelogonright {
            get {
                return this.sedenyremoteInteractivelogonrightField;
            }
            set {
                this.sedenyremoteInteractivelogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned the sedenyservicelogonright right, it is explicitly denied the ability to log on using the service logon type.
        /// </summary>
        public EntityStateBoolType sedenyservicelogonright {
            get {
                return this.sedenyservicelogonrightField;
            }
            set {
                this.sedenyservicelogonrightField = value;
            }
        }
        
        /// <summary>
        /// If an account is assigned this right, it can access the Credential Manager as a trusted caller.
        /// </summary>
        public EntityStateBoolType setrustedcredmanaccessnameright {
            get {
                return this.setrustedcredmanaccessnamerightField;
            }
            set {
                this.setrustedcredmanaccessnamerightField = value;
            }
        }
    }
    
    /// <summary>
    /// Note that this test supports only simple (string based) value collection. For more complex values see the activedirectory57_test.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class activedirectory_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// Note that this object is paired with a state that supports only simple (string based) value collection. For more complex values see the activedirectory57_object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class activedirectory_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType3[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("attribute", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("naming_context", typeof(EntityObjectNamingContextType))]
        [System.Xml.Serialization.XmlElementAttribute("relative_dn", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType3[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType3 {
        
        /// <remarks/>
        attribute,
        
        /// <remarks/>
        naming_context,
        
        /// <remarks/>
        relative_dn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// Note that this state supports only simple (string based) value collection. For more complex values see the activedirectory57_state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class activedirectory_state : StateType {
        
        private EntityStateNamingContextType naming_contextField;
        
        private EntityStateStringType relative_dnField;
        
        private EntityStateStringType attributeField;
        
        private EntityStateStringType object_classField;
        
        private EntityStateAdstypeType adstypeField;
        
        private EntityStateAnySimpleType valueField;
        
        /// <summary>
        /// Each object in active directory exists under a certain naming context (also known as a partition). A naming context is defined as a single object in the Directory Information Tree (DIT) along with every object in the tree subordinate to it. There are three default naming contexts in Active Directory: domain, configuration, and schema.
        /// </summary>
        public EntityStateNamingContextType naming_context {
            get {
                return this.naming_contextField;
            }
            set {
                this.naming_contextField = value;
            }
        }
        
        /// <summary>
        /// The relative_dn field is used to uniquely identify an object inside the specified naming context. It contains all the parts of the objects distinguished name except those outlined by the naming context.
        /// </summary>
        public EntityStateStringType relative_dn {
            get {
                return this.relative_dnField;
            }
            set {
                this.relative_dnField = value;
            }
        }
        
        /// <summary>
        /// Specifies a named value contained by the object.
        /// </summary>
        public EntityStateStringType attribute {
            get {
                return this.attributeField;
            }
            set {
                this.attributeField = value;
            }
        }
        
        /// <summary>
        /// The name of the class of which the object is an instance.
        /// </summary>
        public EntityStateStringType object_class {
            get {
                return this.object_classField;
            }
            set {
                this.object_classField = value;
            }
        }
        
        /// <summary>
        /// Specifies the type of information that the specified attribute represents.
        /// </summary>
        public EntityStateAdstypeType adstype {
            get {
                return this.adstypeField;
            }
            set {
                this.adstypeField = value;
            }
        }
        
        /// <summary>
        /// The actual value of the specified active directory attribute.
        /// </summary>
        public EntityStateAnySimpleType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Note that this test supports complex values that are in the form of a record. For simple (string based) value collection see the activedirectory_test.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class activedirectory57_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// Note that this object supports complex values that are in the form of a record. For simple (string based) value collection see the activedirectory_object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class activedirectory57_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType4[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("attribute", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("naming_context", typeof(EntityObjectNamingContextType))]
        [System.Xml.Serialization.XmlElementAttribute("relative_dn", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType4[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType4 {
        
        /// <remarks/>
        attribute,
        
        /// <remarks/>
        naming_context,
        
        /// <remarks/>
        relative_dn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// Note that this state supports complex values that are in the form of a record. For simple (string based) value collection see the activedirectory_state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class activedirectory57_state : StateType {
        
        private EntityStateNamingContextType naming_contextField;
        
        private EntityStateStringType relative_dnField;
        
        private EntityStateStringType attributeField;
        
        private EntityStateStringType object_classField;
        
        private EntityStateAdstypeType adstypeField;
        
        private EntityStateRecordType valueField;
        
        /// <summary>
        /// Each object in active directory exists under a certain naming context (also known as a partition). A naming context is defined as a single object in the Directory Information Tree (DIT) along with every object in the tree subordinate to it. There are three default naming contexts in Active Directory: domain, configuration, and schema.
        /// </summary>
        public EntityStateNamingContextType naming_context {
            get {
                return this.naming_contextField;
            }
            set {
                this.naming_contextField = value;
            }
        }
        
        /// <summary>
        /// The relative_dn field is used to uniquely identify an object inside the specified naming context. It contains all the parts of the object's distinguished name except those outlined by the naming context.
        /// </summary>
        public EntityStateStringType relative_dn {
            get {
                return this.relative_dnField;
            }
            set {
                this.relative_dnField = value;
            }
        }
        
        /// <summary>
        /// Specifies a named value contained by the object.
        /// </summary>
        public EntityStateStringType attribute {
            get {
                return this.attributeField;
            }
            set {
                this.attributeField = value;
            }
        }
        
        /// <summary>
        /// The name of the class of which the object is an instance.
        /// </summary>
        public EntityStateStringType object_class {
            get {
                return this.object_classField;
            }
            set {
                this.object_classField = value;
            }
        }
        
        /// <summary>
        /// The type of information that the specified attribute represents.
        /// </summary>
        public EntityStateAdstypeType adstype {
            get {
                return this.adstypeField;
            }
            set {
                this.adstypeField = value;
            }
        }
        
        /// <summary>
        /// The actual value of the specified Active Directory attribute. Note that while an Active Directory attribute can contain structured data where it is necessary to collect multiple related fields that can be described by the 'record' datatype, it is not always the case.  It also is possible that an Active Directory attribute can contain only a single value or an array of values. In these cases, there is not a name to uniquely identify the corresponding field which is a requirement for fields in the 'record' datatype.  As a result, the name of the Active Directory attribute will be used to uniquely identify the field and satisfy this requirement.
        /// </summary>
        public EntityStateRecordType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The auditeventpolicy_test is used to check different types of events the system should audit. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a auditeventpolicy_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class auditeventpolicy_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The auditeventpolicy_object element is used by an audit event policy test to define those objects to evaluate based on a specified state. There is actually only one object relating to audit event policy and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check audit event policy will reference the same auditeventpolicy_object which is basically an empty object element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class auditeventpolicy_object : ObjectType {
    }
    
    /// <summary>
    /// The auditeventpolicy_state element specifies the different system activities that can be audited. An audit event policy test will reference a specific instance of this state that defines the exact settings that need to be evaluated. The defined values are found in window's POLICY_AUDIT_EVENT_TYPE enumeration and accessed through the LsaQueryInformationPolicy when the InformationClass parameters are set to PolicyAuditEventsInformation. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class auditeventpolicy_state : StateType {
        
        private EntityStateAuditType account_logonField;
        
        private EntityStateAuditType account_managementField;
        
        private EntityStateAuditType detailed_trackingField;
        
        private EntityStateAuditType directory_service_accessField;
        
        private EntityStateAuditType logonField;
        
        private EntityStateAuditType object_accessField;
        
        private EntityStateAuditType policy_changeField;
        
        private EntityStateAuditType privilege_useField;
        
        private EntityStateAuditType systemField;
        
        /// <summary>
        /// Audit attempts to log on to or log off of the system. Also, audit attempts to make a network connection.
        /// </summary>
        public EntityStateAuditType account_logon {
            get {
                return this.account_logonField;
            }
            set {
                this.account_logonField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to create, delete, or change user or group accounts. Also, audit password changes.
        /// </summary>
        public EntityStateAuditType account_management {
            get {
                return this.account_managementField;
            }
            set {
                this.account_managementField = value;
            }
        }
        
        /// <summary>
        /// Audit specific events, such as program activation, some forms of handle duplication, indirect access to an object, and process exit.  Note that this activitiy is also known as process tracking.
        /// </summary>
        public EntityStateAuditType detailed_tracking {
            get {
                return this.detailed_trackingField;
            }
            set {
                this.detailed_trackingField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to access the directory service.
        /// </summary>
        public EntityStateAuditType directory_service_access {
            get {
                return this.directory_service_accessField;
            }
            set {
                this.directory_service_accessField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to log on to or log off of the system. Also, audit attempts to make a network connection.
        /// </summary>
        public EntityStateAuditType logon {
            get {
                return this.logonField;
            }
            set {
                this.logonField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to access securable objects, such as files.
        /// </summary>
        public EntityStateAuditType object_access {
            get {
                return this.object_accessField;
            }
            set {
                this.object_accessField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to change Policy object rules.
        /// </summary>
        public EntityStateAuditType policy_change {
            get {
                return this.policy_changeField;
            }
            set {
                this.policy_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to use privileges.
        /// </summary>
        public EntityStateAuditType privilege_use {
            get {
                return this.privilege_useField;
            }
            set {
                this.privilege_useField = value;
            }
        }
        
        /// <summary>
        /// Audit attempts to shut down or restart the computer. Also, audit events that affect system security or the security log.
        /// </summary>
        public EntityStateAuditType system {
            get {
                return this.systemField;
            }
            set {
                this.systemField = value;
            }
        }
    }
    
    /// <summary>
    /// The auditeventpolicysubcategories_test is used to check the audit event policy settings on a Windows system. These settings are used to specify which system and network events are monitored.  For example, if the credential_validation element has a value of AUDIT_FAILURE, it means that the system is configured to log all unsuccessful attempts to validate a user account on a system. It is important to note that these audit event policy settings are specific to certain versions of Windows. As a result, the documentation for that version of Windows should be consulted for more information on each setting. The test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a auditeventpolicy_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class auditeventpolicysubcategories_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The auditeventpolicysubcategories_object element is used by an audit event policy subcategories test to define those objects to evaluate based on a specified state. There is actually only one object relating to audit event policy subcategories and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check audit event policy subcategories will reference the same auditeventpolicysubcategories_object which is basically an empty object element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class auditeventpolicysubcategories_object : ObjectType {
    }
    
    /// <summary>
    /// The auditeventpolicysubcategories_state element specifies the different system activities that can be audited. An audit event policy subcategories test will reference a specific instance of this state that defines the exact subcategories that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class auditeventpolicysubcategories_state : StateType {
        
        private EntityStateAuditType credential_validationField;
        
        private EntityStateAuditType kerberos_authentication_serviceField;
        
        private EntityStateAuditType kerberos_service_ticket_operationsField;
        
        private EntityStateAuditType kerberos_ticket_eventsField;
        
        private EntityStateAuditType other_account_logon_eventsField;
        
        private EntityStateAuditType application_group_managementField;
        
        private EntityStateAuditType computer_account_managementField;
        
        private EntityStateAuditType distribution_group_managementField;
        
        private EntityStateAuditType other_account_management_eventsField;
        
        private EntityStateAuditType security_group_managementField;
        
        private EntityStateAuditType user_account_managementField;
        
        private EntityStateAuditType dpapi_activityField;
        
        private EntityStateAuditType process_creationField;
        
        private EntityStateAuditType process_terminationField;
        
        private EntityStateAuditType rpc_eventsField;
        
        private EntityStateAuditType directory_service_accessField;
        
        private EntityStateAuditType directory_service_changesField;
        
        private EntityStateAuditType directory_service_replicationField;
        
        private EntityStateAuditType detailed_directory_service_replicationField;
        
        private EntityStateAuditType account_lockoutField;
        
        private EntityStateAuditType ipsec_extended_modeField;
        
        private EntityStateAuditType ipsec_main_modeField;
        
        private EntityStateAuditType ipsec_quick_modeField;
        
        private EntityStateAuditType logoffField;
        
        private EntityStateAuditType logonField;
        
        private EntityStateAuditType network_policy_serverField;
        
        private EntityStateAuditType other_logon_logoff_eventsField;
        
        private EntityStateAuditType special_logonField;
        
        private EntityStateAuditType application_generatedField;
        
        private EntityStateAuditType certification_servicesField;
        
        private EntityStateAuditType detailed_file_shareField;
        
        private EntityStateAuditType file_shareField;
        
        private EntityStateAuditType file_systemField;
        
        private EntityStateAuditType filtering_platform_connectionField;
        
        private EntityStateAuditType filtering_platform_packet_dropField;
        
        private EntityStateAuditType handle_manipulationField;
        
        private EntityStateAuditType kernel_objectField;
        
        private EntityStateAuditType other_object_access_eventsField;
        
        private EntityStateAuditType registryField;
        
        private EntityStateAuditType samField;
        
        private EntityStateAuditType audit_policy_changeField;
        
        private EntityStateAuditType authentication_policy_changeField;
        
        private EntityStateAuditType authorization_policy_changeField;
        
        private EntityStateAuditType filtering_platform_policy_changeField;
        
        private EntityStateAuditType mpssvc_rule_level_policy_changeField;
        
        private EntityStateAuditType other_policy_change_eventsField;
        
        private EntityStateAuditType non_sensitive_privilege_useField;
        
        private EntityStateAuditType other_privilege_use_eventsField;
        
        private EntityStateAuditType sensitive_privilege_useField;
        
        private EntityStateAuditType ipsec_driverField;
        
        private EntityStateAuditType other_system_eventsField;
        
        private EntityStateAuditType security_state_changeField;
        
        private EntityStateAuditType security_system_extensionField;
        
        private EntityStateAuditType system_integrityField;
        
        /// <summary>
        /// Audit the events produced during the validation of a user's logon credentials.
        /// </summary>
        public EntityStateAuditType credential_validation {
            get {
                return this.credential_validationField;
            }
            set {
                this.credential_validationField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by Kerberos authentication ticket-granting requests.
        /// </summary>
        public EntityStateAuditType kerberos_authentication_service {
            get {
                return this.kerberos_authentication_serviceField;
            }
            set {
                this.kerberos_authentication_serviceField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by Kerberos service ticket requests.
        /// </summary>
        public EntityStateAuditType kerberos_service_ticket_operations {
            get {
                return this.kerberos_service_ticket_operationsField;
            }
            set {
                this.kerberos_service_ticket_operationsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced during the validation of Kerberos tickets provided for a user account logon request.
        /// </summary>
        public EntityStateAuditType kerberos_ticket_events {
            get {
                return this.kerberos_ticket_eventsField;
            }
            set {
                this.kerberos_ticket_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to user accounts that are not covered by other events in the Account Logon category.
        /// </summary>
        public EntityStateAuditType other_account_logon_events {
            get {
                return this.other_account_logon_eventsField;
            }
            set {
                this.other_account_logon_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to application groups.
        /// </summary>
        public EntityStateAuditType application_group_management {
            get {
                return this.application_group_managementField;
            }
            set {
                this.application_group_managementField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to computer accounts.
        /// </summary>
        public EntityStateAuditType computer_account_management {
            get {
                return this.computer_account_managementField;
            }
            set {
                this.computer_account_managementField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to distribution groups.
        /// </summary>
        public EntityStateAuditType distribution_group_management {
            get {
                return this.distribution_group_managementField;
            }
            set {
                this.distribution_group_managementField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by other user account changes that are not covered by other events in the Account Management category.
        /// </summary>
        public EntityStateAuditType other_account_management_events {
            get {
                return this.other_account_management_eventsField;
            }
            set {
                this.other_account_management_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to security groups.
        /// </summary>
        public EntityStateAuditType security_group_management {
            get {
                return this.security_group_managementField;
            }
            set {
                this.security_group_managementField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to user accounts.
        /// </summary>
        public EntityStateAuditType user_account_management {
            get {
                return this.user_account_managementField;
            }
            set {
                this.user_account_managementField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when requests are made to the Data Protection application interface.
        /// </summary>
        public EntityStateAuditType dpapi_activity {
            get {
                return this.dpapi_activityField;
            }
            set {
                this.dpapi_activityField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when a process is created or starts.
        /// </summary>
        public EntityStateAuditType process_creation {
            get {
                return this.process_creationField;
            }
            set {
                this.process_creationField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when a process ends.
        /// </summary>
        public EntityStateAuditType process_termination {
            get {
                return this.process_terminationField;
            }
            set {
                this.process_terminationField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by inbound remote procedure call connections.
        /// </summary>
        public EntityStateAuditType rpc_events {
            get {
                return this.rpc_eventsField;
            }
            set {
                this.rpc_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when a Active Directory Domain Services object is accessed.
        /// </summary>
        public EntityStateAuditType directory_service_access {
            get {
                return this.directory_service_accessField;
            }
            set {
                this.directory_service_accessField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when changes are made to Active Directory Domain Services objects.
        /// </summary>
        public EntityStateAuditType directory_service_changes {
            get {
                return this.directory_service_changesField;
            }
            set {
                this.directory_service_changesField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when two Active Directory Domain Services domain controllers are replicated.
        /// </summary>
        public EntityStateAuditType directory_service_replication {
            get {
                return this.directory_service_replicationField;
            }
            set {
                this.directory_service_replicationField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by detailed Active Directory Domain Services replication between domain controllers.
        /// </summary>
        public EntityStateAuditType detailed_directory_service_replication {
            get {
                return this.detailed_directory_service_replicationField;
            }
            set {
                this.detailed_directory_service_replicationField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by a failed attempt to log onto a locked out account.
        /// </summary>
        public EntityStateAuditType account_lockout {
            get {
                return this.account_lockoutField;
            }
            set {
                this.account_lockoutField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by Internet Key Exchange and Authenticated Internet protocol during Extended Mode negotiations.
        /// </summary>
        public EntityStateAuditType ipsec_extended_mode {
            get {
                return this.ipsec_extended_modeField;
            }
            set {
                this.ipsec_extended_modeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by Internet Key Exchange and Authenticated Internet protocol during Main Mode negotiations.
        /// </summary>
        public EntityStateAuditType ipsec_main_mode {
            get {
                return this.ipsec_main_modeField;
            }
            set {
                this.ipsec_main_modeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by Internet Key Exchange and Authenticated Internet protocol during Quick Mode negotiations.
        /// </summary>
        public EntityStateAuditType ipsec_quick_mode {
            get {
                return this.ipsec_quick_modeField;
            }
            set {
                this.ipsec_quick_modeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by closing a logon session.
        /// </summary>
        public EntityStateAuditType logoff {
            get {
                return this.logoffField;
            }
            set {
                this.logoffField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by attempts to log onto a user account.
        /// </summary>
        public EntityStateAuditType logon {
            get {
                return this.logonField;
            }
            set {
                this.logonField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by RADIUS and Network Access Protection user access requests.
        /// </summary>
        public EntityStateAuditType network_policy_server {
            get {
                return this.network_policy_serverField;
            }
            set {
                this.network_policy_serverField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by other logon/logoff based events that are not covered in the Logon/Logoff category.
        /// </summary>
        public EntityStateAuditType other_logon_logoff_events {
            get {
                return this.other_logon_logoff_eventsField;
            }
            set {
                this.other_logon_logoff_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by special logons.
        /// </summary>
        public EntityStateAuditType special_logon {
            get {
                return this.special_logonField;
            }
            set {
                this.special_logonField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by applications that use the Windows Auditing API.
        /// </summary>
        public EntityStateAuditType application_generated {
            get {
                return this.application_generatedField;
            }
            set {
                this.application_generatedField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by operations on Active Directory Certificate Services.
        /// </summary>
        public EntityStateAuditType certification_services {
            get {
                return this.certification_servicesField;
            }
            set {
                this.certification_servicesField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by attempts to access files and folders on a shared folder.
        /// </summary>
        public EntityStateAuditType detailed_file_share {
            get {
                return this.detailed_file_shareField;
            }
            set {
                this.detailed_file_shareField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by attempts to access a shared folder.
        /// </summary>
        public EntityStateAuditType file_share {
            get {
                return this.file_shareField;
            }
            set {
                this.file_shareField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced user attempts to access file system objects.
        /// </summary>
        public EntityStateAuditType file_system {
            get {
                return this.file_systemField;
            }
            set {
                this.file_systemField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by connections that are allowed or blocked by Windows Filtering Platform.
        /// </summary>
        public EntityStateAuditType filtering_platform_connection {
            get {
                return this.filtering_platform_connectionField;
            }
            set {
                this.filtering_platform_connectionField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by packets that are dropped by Windows Filtering Platform.
        /// </summary>
        public EntityStateAuditType filtering_platform_packet_drop {
            get {
                return this.filtering_platform_packet_dropField;
            }
            set {
                this.filtering_platform_packet_dropField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced when a handle is opened or closed.
        /// </summary>
        public EntityStateAuditType handle_manipulation {
            get {
                return this.handle_manipulationField;
            }
            set {
                this.handle_manipulationField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by attempts to access the system kernel.
        /// </summary>
        public EntityStateAuditType kernel_object {
            get {
                return this.kernel_objectField;
            }
            set {
                this.kernel_objectField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by the management of Task Scheduler jobs or COM+ objects.
        /// </summary>
        public EntityStateAuditType other_object_access_events {
            get {
                return this.other_object_access_eventsField;
            }
            set {
                this.other_object_access_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by attempts to access registry objects.
        /// </summary>
        public EntityStateAuditType registry {
            get {
                return this.registryField;
            }
            set {
                this.registryField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by attempts to access Security Accounts Manager objects.
        /// </summary>
        public EntityStateAuditType sam {
            get {
                return this.samField;
            }
            set {
                this.samField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes in security audit policy settings.
        /// </summary>
        public EntityStateAuditType audit_policy_change {
            get {
                return this.audit_policy_changeField;
            }
            set {
                this.audit_policy_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to the authentication policy.
        /// </summary>
        public EntityStateAuditType authentication_policy_change {
            get {
                return this.authentication_policy_changeField;
            }
            set {
                this.authentication_policy_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to the authorization policy.
        /// </summary>
        public EntityStateAuditType authorization_policy_change {
            get {
                return this.authorization_policy_changeField;
            }
            set {
                this.authorization_policy_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to the Windows Filtering Platform.
        /// </summary>
        public EntityStateAuditType filtering_platform_policy_change {
            get {
                return this.filtering_platform_policy_changeField;
            }
            set {
                this.filtering_platform_policy_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes to policy rules used by the Windows Firewall.
        /// </summary>
        public EntityStateAuditType mpssvc_rule_level_policy_change {
            get {
                return this.mpssvc_rule_level_policy_changeField;
            }
            set {
                this.mpssvc_rule_level_policy_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by other security policy changes that are not covered other events in the Policy Change category.
        /// </summary>
        public EntityStateAuditType other_policy_change_events {
            get {
                return this.other_policy_change_eventsField;
            }
            set {
                this.other_policy_change_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by the use of non-sensitive privileges.
        /// </summary>
        public EntityStateAuditType non_sensitive_privilege_use {
            get {
                return this.non_sensitive_privilege_useField;
            }
            set {
                this.non_sensitive_privilege_useField = value;
            }
        }
        
        /// <summary>
        /// This is currently not used and has been reserved by Microsoft for use in the future.
        /// </summary>
        public EntityStateAuditType other_privilege_use_events {
            get {
                return this.other_privilege_use_eventsField;
            }
            set {
                this.other_privilege_use_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by the use of sensitive privileges.
        /// </summary>
        public EntityStateAuditType sensitive_privilege_use {
            get {
                return this.sensitive_privilege_useField;
            }
            set {
                this.sensitive_privilege_useField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by the IPsec filter driver.
        /// </summary>
        public EntityStateAuditType ipsec_driver {
            get {
                return this.ipsec_driverField;
            }
            set {
                this.ipsec_driverField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by the startup and shutdown, security policy processing, and cryptography key file and migration operations of the Windows Firewall.
        /// </summary>
        public EntityStateAuditType other_system_events {
            get {
                return this.other_system_eventsField;
            }
            set {
                this.other_system_eventsField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by changes in the security state.
        /// </summary>
        public EntityStateAuditType security_state_change {
            get {
                return this.security_state_changeField;
            }
            set {
                this.security_state_changeField = value;
            }
        }
        
        /// <summary>
        /// Audit the events produced by the security system extensions or services.
        /// </summary>
        public EntityStateAuditType security_system_extension {
            get {
                return this.security_system_extensionField;
            }
            set {
                this.security_system_extensionField = value;
            }
        }
        
        /// <summary>
        /// Audit the events that indicate that the integrity security subsystem has been violated.
        /// </summary>
        public EntityStateAuditType system_integrity {
            get {
                return this.system_integrityField;
            }
            set {
                this.system_integrityField = value;
            }
        }
    }
    
    /// <summary>
    /// The cmdlet_test is used to levarage a PowerShell cmdlet to check a Windows system. The test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a cmdlet_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class cmdlet_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The cmdlet_object element is used by a cmdlet_test to identify the set of cmdlets to use and the parameters to provide to them for checking the state of a system. In order to ensure the consistency of PowerShell cmdlet support among OVAL interpreters as well as ensure that the state of a system is not changed, every OVAL interpreter must implement the following requirements.  An OVAL interpreter must only support the processing of the verbs specified in the EntityObjectCmdletVerbType.  If a cmdlet verb that is not defined in this enumeration is discovered, an error should be reported and the cmdlet must not be executed on the system.  While XML Schema validation will enforce this requirement, it is strongly recommended that OVAL interpreters implement a whitelist of allowed cmdlets.  This can be done using constrained runspaces which can limit the PowerShell execution environment.  For more information, please see Microsoft’s documentation on Windows PowerShell Host Application Concepts.  Furthermore, it is strongly recommended that OVAL interpreters also implement PowerShell support with the NoLanguage mode enabled.  The NoLanguage mode ensures that scripts that need to be evaluated are not allowed in the runspace. For more information about the NoLanguage mode, please see Microsoft’s documentation on the PSLanguageMode enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class cmdlet_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType5[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("module_id", typeof(EntityObjectGUIDType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("module_name", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("module_version", typeof(EntityObjectVersionType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("noun", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("parameters", typeof(EntityObjectRecordType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("select", typeof(EntityObjectRecordType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("verb", typeof(EntityObjectCmdletVerbType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType5[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType5 {
        
        /// <remarks/>
        module_id,
        
        /// <remarks/>
        module_name,
        
        /// <remarks/>
        module_version,
        
        /// <remarks/>
        noun,
        
        /// <remarks/>
        parameters,
        
        /// <remarks/>
        select,
        
        /// <remarks/>
        verb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The cmdlet_state allows for assertions about the presence of PowerShell cmdlet related properties and values obtained from a cmdlet.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class cmdlet_state : StateType {
        
        private EntityStateStringType module_nameField;
        
        private EntityStateGUIDType module_idField;
        
        private EntityStateVersionType module_versionField;
        
        private EntityStateCmdletVerbType verbField;
        
        private EntityStateStringType nounField;
        
        private EntityStateRecordType parametersField;
        
        private EntityStateRecordType selectField;
        
        private EntityStateRecordType valueField;
        
        /// <summary>
        /// The name of the module that contains the cmdlet.
        /// </summary>
        public EntityStateStringType module_name {
            get {
                return this.module_nameField;
            }
            set {
                this.module_nameField = value;
            }
        }
        
        /// <summary>
        /// The globally unique identifier for the module.
        /// </summary>
        public EntityStateGUIDType module_id {
            get {
                return this.module_idField;
            }
            set {
                this.module_idField = value;
            }
        }
        
        /// <summary>
        /// The version of the module that contains the cmdlet in the form of MAJOR.MINOR.
        /// </summary>
        public EntityStateVersionType module_version {
            get {
                return this.module_versionField;
            }
            set {
                this.module_versionField = value;
            }
        }
        
        /// <summary>
        /// The cmdlet verb.
        /// </summary>
        public EntityStateCmdletVerbType verb {
            get {
                return this.verbField;
            }
            set {
                this.verbField = value;
            }
        }
        
        /// <summary>
        /// The cmdlet noun.
        /// </summary>
        public EntityStateStringType noun {
            get {
                return this.nounField;
            }
            set {
                this.nounField = value;
            }
        }
        
        /// <summary>
        /// A list of properties (name and value pairs) as input to invoke the cmdlet. Each property name must be unique.
        /// </summary>
        public EntityStateRecordType parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <summary>
        /// A list of fields (name and value pairs) used as input to the Select-Object cmdlet to select specific output properties. Each property name must be unique.
        /// </summary>
        public EntityStateRecordType select {
            get {
                return this.selectField;
            }
            set {
                this.selectField = value;
            }
        }
        
        /// <summary>
        /// The expected value represented as a set of fields (name and value pairs). Each field must be have a unique name.
        /// </summary>
        public EntityStateRecordType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The dnscache_test is used to check the time to live and IP addresses associated with a domain name.  The time to live and IP addresses for a particular domain name are retrieved from the DNS cache on the local system. The entries in the DNS cache can be collected using Microsoft's DnsGetCacheDataTable() and DnsQuery() API calls. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a dnscache_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class dnscache_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The dnscache_object is used by the dnscache_test to specify the domain name(s) that should be collected from the DNS cache on the local system. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class dnscache_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("domain_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The dnscache_state contains three entities that are used to check the domain name, time to live, and IP addresses associated with the DNS cache entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class dnscache_state : StateType {
        
        private EntityStateStringType domain_nameField;
        
        private EntityStateIntType ttlField;
        
        private EntityStateIPAddressStringType ip_addressField;
        
        /// <summary>
        /// The domain_name element contains a string that represents a domain name that was collected from the DNS cache on the local system.
        /// </summary>
        public EntityStateStringType domain_name {
            get {
                return this.domain_nameField;
            }
            set {
                this.domain_nameField = value;
            }
        }
        
        /// <summary>
        /// The ttl element contains an integer that represents the time to live in seconds of the DNS cache entry.
        /// </summary>
        public EntityStateIntType ttl {
            get {
                return this.ttlField;
            }
            set {
                this.ttlField = value;
            }
        }
        
        /// <summary>
        /// The ip_address element contains a string that represents an IP address associated with the specified domain name that was collected from the DNS cache on the local system. Note that the IP address can be IPv4 or IPv6.
        /// </summary>
        public EntityStateIPAddressStringType ip_address {
            get {
                return this.ip_addressField;
            }
            set {
                this.ip_addressField = value;
            }
        }
    }
    
    /// <summary>
    /// The file test is used to check metadata associated with Windows files. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a file_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class file_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class file_object : ObjectType {
        
        private object[] itemsField;
        
        private file_object_ItemsChoices[] _fileObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("FileObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public file_object_ItemsChoices[] FileObjectItemsElementName {
            get {
                return this._fileObjectItemsElementNameField;
            }
            set {
                this._fileObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileEffectiveRightsBehaviors))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileEffectiveRights53Behaviors))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileAuditPermissionsBehaviors))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileAuditPermissions53Behaviors))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class FileBehaviors {
        
        private string max_depthField;
        
        private FileBehaviorsRecurse_direction recurse_directionField;
        
        private FileBehaviorsRecurse_file_system recurse_file_systemField;
        
        private FileBehaviorsWindows_view windows_viewField;
        
        public FileBehaviors() {
            this.max_depthField = "-1";
            this.recurse_directionField = FileBehaviorsRecurse_direction.none;
            this.recurse_file_systemField = FileBehaviorsRecurse_file_system.all;
            this.windows_viewField = FileBehaviorsWindows_view.Item64_bit;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        [System.ComponentModel.DefaultValueAttribute("-1")]
        public string max_depth {
            get {
                return this.max_depthField;
            }
            set {
                this.max_depthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FileBehaviorsRecurse_direction.none)]
        public FileBehaviorsRecurse_direction recurse_direction {
            get {
                return this.recurse_directionField;
            }
            set {
                this.recurse_directionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FileBehaviorsRecurse_file_system.all)]
        public FileBehaviorsRecurse_file_system recurse_file_system {
            get {
                return this.recurse_file_systemField;
            }
            set {
                this.recurse_file_systemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FileBehaviorsWindows_view.Item64_bit)]
        public FileBehaviorsWindows_view windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    public enum FileBehaviorsRecurse_direction {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    public enum FileBehaviorsRecurse_file_system {
        
        /// <remarks/>
        all,
        
        /// <remarks/>
        local,
        
        /// <remarks/>
        defined,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    public enum FileBehaviorsWindows_view {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("32_bit")]
        Item32_bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64_bit")]
        Item64_bit,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class FileEffectiveRightsBehaviors : FileBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public FileEffectiveRightsBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class FileEffectiveRights53Behaviors : FileBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public FileEffectiveRights53Behaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class FileAuditPermissionsBehaviors : FileBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public FileAuditPermissionsBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class FileAuditPermissions53Behaviors : FileBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public FileAuditPermissions53Behaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum file_object_ItemsChoices {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The file_state element defines the different metadata associate with a Windows file. This includes the path, filename, owner, size, last modified time, version, etc. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class file_state : StateType {
        
        private EntityStateStringType filepathField;
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType ownerField;
        
        private EntityStateIntType sizeField;
        
        private EntityStateIntType a_timeField;
        
        private EntityStateIntType c_timeField;
        
        private EntityStateIntType m_timeField;
        
        private EntityStateStringType ms_checksumField;
        
        private EntityStateVersionType version1Field;
        
        private EntityStateFileTypeType typeField;
        
        private EntityStateStringType development_classField;
        
        private EntityStateStringType companyField;
        
        private EntityStateStringType internal_nameField;
        
        private EntityStateStringType languageField;
        
        private EntityStateStringType original_filenameField;
        
        private EntityStateStringType product_nameField;
        
        private EntityStateVersionType product_versionField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.
        /// </summary>
        public EntityStateStringType filepath {
            get {
                return this.filepathField;
            }
            set {
                this.filepathField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The filename element specifies the name of the file.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// The owner element is a string that contains the name of the owner. The name should be specified in the DOMAIN\username format.
        /// </summary>
        public EntityStateStringType owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <summary>
        /// The size element is the size of the file in bytes.
        /// </summary>
        public EntityStateIntType size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <summary>
        /// Time of last access of file. Valid on NTFS but not on FAT formatted disk drives. The string should represent the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
        /// </summary>
        public EntityStateIntType a_time {
            get {
                return this.a_timeField;
            }
            set {
                this.a_timeField = value;
            }
        }
        
        /// <summary>
        /// Time of creation of file. Valid on NTFS but not on FAT formatted disk drives. The string should represent the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
        /// </summary>
        public EntityStateIntType c_time {
            get {
                return this.c_timeField;
            }
            set {
                this.c_timeField = value;
            }
        }
        
        /// <summary>
        /// Time of last modification of file. The string should represent the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
        /// </summary>
        public EntityStateIntType m_time {
            get {
                return this.m_timeField;
            }
            set {
                this.m_timeField = value;
            }
        }
        
        /// <summary>
        /// The checksum of the file as supplied by Microsoft's MapFileAndCheckSum function.
        /// </summary>
        public EntityStateStringType ms_checksum {
            get {
                return this.ms_checksumField;
            }
            set {
                this.ms_checksumField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("version")]
        public EntityStateVersionType version1 {
            get {
                return this.version1Field;
            }
            set {
                this.version1Field = value;
            }
        }
        
        /// <summary>
        /// The type element marks whether the file is a directory, named pipe, standard file, etc. These types are the return values for GetFileType, with the exception of FILE_ATTRIBUTE_DIRECTORY which is obtained by looking at GetFileAttributesEx. NOTE: Should this entity be split into two in future versions of the language as there are other values associated with GetFileAttributesEx that are not represented here?
        /// </summary>
        public EntityStateFileTypeType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <summary>
        /// The development_class element allows the distinction to be made between the GDR development environment and the QFE development environment. This field holds the text found in front of the mmmmmm-nnnn version, for example srv03_gdr.
        /// </summary>
        public EntityStateStringType development_class {
            get {
                return this.development_classField;
            }
            set {
                this.development_classField = value;
            }
        }
        
        /// <summary>
        /// This entity defines a company name to be found within the version-information structure.
        /// </summary>
        public EntityStateStringType company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <summary>
        /// This entity defines an internal name to be found within the version-information structure.
        /// </summary>
        public EntityStateStringType internal_name {
            get {
                return this.internal_nameField;
            }
            set {
                this.internal_nameField = value;
            }
        }
        
        /// <summary>
        /// This entity defines a language to be found within the version-information structure.
        /// </summary>
        public EntityStateStringType language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <summary>
        /// This entity defines an original filename to be found within the version-information structure.
        /// </summary>
        public EntityStateStringType original_filename {
            get {
                return this.original_filenameField;
            }
            set {
                this.original_filenameField = value;
            }
        }
        
        /// <summary>
        /// This entity defines a product name to be found within the version-information structure.
        /// </summary>
        public EntityStateStringType product_name {
            get {
                return this.product_nameField;
            }
            set {
                this.product_nameField = value;
            }
        }
        
        /// <summary>
        /// This entity defines a product version to be found within the version-information structure.
        /// </summary>
        public EntityStateVersionType product_version {
            get {
                return this.product_versionField;
            }
            set {
                this.product_versionField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The file audit permissions test is used to check the audit permissions associated with Windows files. Note that the trustee's audited permissions are the audit permissons that the SACL grants to the trustee or to any groups of which the trustee is a member. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileauditedpermissions_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileauditedpermissions53_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileauditedpermissions53_object : ObjectType {
        
        private object[] itemsField;
        
        private fileauditedpermissions53_objectItemsChoices[] _fileauditedpermissions53ObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileAuditPermissions53Behaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Fileauditedpermissions53ObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public fileauditedpermissions53_objectItemsChoices[] Fileauditedpermissions53ObjectItemsElementName {
            get {
                return this._fileauditedpermissions53ObjectItemsElementNameField;
            }
            set {
                this._fileauditedpermissions53ObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum fileauditedpermissions53_objectItemsChoices {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The fileauditedpermissions53_state element defines the different audit permissions that can be associated with a given fileauditedpermissions53_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileauditedpermissions53_state : StateType {
        
        private EntityStateStringType filepathField;
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateAuditType standard_deleteField;
        
        private EntityStateAuditType standard_read_controlField;
        
        private EntityStateAuditType standard_write_dacField;
        
        private EntityStateAuditType standard_write_ownerField;
        
        private EntityStateAuditType standard_synchronizeField;
        
        private EntityStateAuditType access_system_securityField;
        
        private EntityStateAuditType generic_readField;
        
        private EntityStateAuditType generic_writeField;
        
        private EntityStateAuditType generic_executeField;
        
        private EntityStateAuditType generic_allField;
        
        private EntityStateAuditType file_read_dataField;
        
        private EntityStateAuditType file_write_dataField;
        
        private EntityStateAuditType file_append_dataField;
        
        private EntityStateAuditType file_read_eaField;
        
        private EntityStateAuditType file_write_eaField;
        
        private EntityStateAuditType file_executeField;
        
        private EntityStateAuditType file_delete_childField;
        
        private EntityStateAuditType file_read_attributesField;
        
        private EntityStateAuditType file_write_attributesField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.
        /// </summary>
        public EntityStateStringType filepath {
            get {
                return this.filepathField;
            }
            set {
                this.filepathField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The filename element specifies the name of a file to test for.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateAuditType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateAuditType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateAuditType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateAuditType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateAuditType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateAuditType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateAuditType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateAuditType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read data from the file.
        /// </summary>
        public EntityStateAuditType file_read_data {
            get {
                return this.file_read_dataField;
            }
            set {
                this.file_read_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write data to the file.
        /// </summary>
        public EntityStateAuditType file_write_data {
            get {
                return this.file_write_dataField;
            }
            set {
                this.file_write_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to append data to the file.
        /// </summary>
        public EntityStateAuditType file_append_data {
            get {
                return this.file_append_dataField;
            }
            set {
                this.file_append_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read extended attributes.
        /// </summary>
        public EntityStateAuditType file_read_ea {
            get {
                return this.file_read_eaField;
            }
            set {
                this.file_read_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write extended attributes.
        /// </summary>
        public EntityStateAuditType file_write_ea {
            get {
                return this.file_write_eaField;
            }
            set {
                this.file_write_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to execute a file.
        /// </summary>
        public EntityStateAuditType file_execute {
            get {
                return this.file_executeField;
            }
            set {
                this.file_executeField = value;
            }
        }
        
        /// <summary>
        /// Right to delete a directory and all the files it contains (its children), even if the files are read-only.
        /// </summary>
        public EntityStateAuditType file_delete_child {
            get {
                return this.file_delete_childField;
            }
            set {
                this.file_delete_childField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read file attributes.
        /// </summary>
        public EntityStateAuditType file_read_attributes {
            get {
                return this.file_read_attributesField;
            }
            set {
                this.file_read_attributesField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to change file attributes.
        /// </summary>
        public EntityStateAuditType file_write_attributes {
            get {
                return this.file_write_attributesField;
            }
            set {
                this.file_write_attributesField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The file audited permissions test is used to check the audit permissions associated with Windows files. Note that the trustee's audited permissions are the audit permissons that the SACL grants to the trustee or to any groups of which the trustee is a member. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileauditedpermissions_object, and the optional state element references a fileauditedpermissions_state that specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileauditedpermissions_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A fileauditedpermissions_object is defined as a combination of a Windows file and trustee name. The file represents the file to be evaluated while the trustee name represents the account (SID) to check audited permissions of. If multiple files or SIDs are matched by either reference, then each possible combination of file and SID is a matching file audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileAuditPermissionsBehaviors complex type for more information about specific behaviors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileauditedpermissions_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType8[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileAuditPermissionsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType8[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType8 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        trustee_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The fileauditedpermissions_state element defines the different audit permissions that can be associated with a given fileauditedpermissions_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileauditedpermissions_state : StateType {
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType trustee_nameField;
        
        private EntityStateAuditType standard_deleteField;
        
        private EntityStateAuditType standard_read_controlField;
        
        private EntityStateAuditType standard_write_dacField;
        
        private EntityStateAuditType standard_write_ownerField;
        
        private EntityStateAuditType standard_synchronizeField;
        
        private EntityStateAuditType access_system_securityField;
        
        private EntityStateAuditType generic_readField;
        
        private EntityStateAuditType generic_writeField;
        
        private EntityStateAuditType generic_executeField;
        
        private EntityStateAuditType generic_allField;
        
        private EntityStateAuditType file_read_dataField;
        
        private EntityStateAuditType file_write_dataField;
        
        private EntityStateAuditType file_append_dataField;
        
        private EntityStateAuditType file_read_eaField;
        
        private EntityStateAuditType file_write_eaField;
        
        private EntityStateAuditType file_executeField;
        
        private EntityStateAuditType file_delete_childField;
        
        private EntityStateAuditType file_read_attributesField;
        
        private EntityStateAuditType file_write_attributesField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The filename element specifies the name of a file to test for.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_name is the unique name associated with a particular security identifier (SID). In Windows, trustee names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, trustee names should be identified in the form: "domain\trustee name". For local trustee names use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType trustee_name {
            get {
                return this.trustee_nameField;
            }
            set {
                this.trustee_nameField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateAuditType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateAuditType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateAuditType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateAuditType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateAuditType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateAuditType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateAuditType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateAuditType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read data from the file.
        /// </summary>
        public EntityStateAuditType file_read_data {
            get {
                return this.file_read_dataField;
            }
            set {
                this.file_read_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write data to the file.
        /// </summary>
        public EntityStateAuditType file_write_data {
            get {
                return this.file_write_dataField;
            }
            set {
                this.file_write_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to append data to the file.
        /// </summary>
        public EntityStateAuditType file_append_data {
            get {
                return this.file_append_dataField;
            }
            set {
                this.file_append_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read extended attributes.
        /// </summary>
        public EntityStateAuditType file_read_ea {
            get {
                return this.file_read_eaField;
            }
            set {
                this.file_read_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write extended attributes.
        /// </summary>
        public EntityStateAuditType file_write_ea {
            get {
                return this.file_write_eaField;
            }
            set {
                this.file_write_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to execute a file.
        /// </summary>
        public EntityStateAuditType file_execute {
            get {
                return this.file_executeField;
            }
            set {
                this.file_executeField = value;
            }
        }
        
        /// <summary>
        /// Right to delete a directory and all the files it contains (its children), even if the files are read-only.
        /// </summary>
        public EntityStateAuditType file_delete_child {
            get {
                return this.file_delete_childField;
            }
            set {
                this.file_delete_childField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read file attributes.
        /// </summary>
        public EntityStateAuditType file_read_attributes {
            get {
                return this.file_read_attributesField;
            }
            set {
                this.file_read_attributesField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to change file attributes.
        /// </summary>
        public EntityStateAuditType file_write_attributes {
            get {
                return this.file_write_attributesField;
            }
            set {
                this.file_write_attributesField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The file effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the DACL grants to the trustee or to any groups of which the trustee is a member. The fileeffectiverights53_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileeffectiverights53_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileeffectiverights53_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileeffectiverights53_object : ObjectType {
        
        private object[] itemsField;
        
        private fileeffectiverights53_object_ItemsChoices[] _fileeffectiverights53ObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileEffectiveRights53Behaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Fileeffectiverights53ObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public fileeffectiverights53_object_ItemsChoices[] Fileeffectiverights53ObjectItemsElementName {
            get {
                return this._fileeffectiverights53ObjectItemsElementNameField;
            }
            set {
                this._fileeffectiverights53ObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum fileeffectiverights53_object_ItemsChoices {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The fileeffectiverights53_state element defines the different rights that can be associated with a given fileeffectiverights53_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileeffectiverights53_state : StateType {
        
        private EntityStateStringType filepathField;
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType standard_synchronizeField;
        
        private EntityStateBoolType access_system_securityField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType generic_allField;
        
        private EntityStateBoolType file_read_dataField;
        
        private EntityStateBoolType file_write_dataField;
        
        private EntityStateBoolType file_append_dataField;
        
        private EntityStateBoolType file_read_eaField;
        
        private EntityStateBoolType file_write_eaField;
        
        private EntityStateBoolType file_executeField;
        
        private EntityStateBoolType file_delete_childField;
        
        private EntityStateBoolType file_read_attributesField;
        
        private EntityStateBoolType file_write_attributesField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.
        /// </summary>
        public EntityStateStringType filepath {
            get {
                return this.filepathField;
            }
            set {
                this.filepathField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The filename element specifies the name of the file.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateBoolType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateBoolType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateBoolType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read data from the file, or if a directory, grants the right to list the contents of the directory.
        /// </summary>
        public EntityStateBoolType file_read_data {
            get {
                return this.file_read_dataField;
            }
            set {
                this.file_read_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write data to the file, or if a directory, grants the right to add a file to the directory.
        /// </summary>
        public EntityStateBoolType file_write_data {
            get {
                return this.file_write_dataField;
            }
            set {
                this.file_write_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to append data to the file, or if a directory, grants the right to add a sub-directory to the directory.
        /// </summary>
        public EntityStateBoolType file_append_data {
            get {
                return this.file_append_dataField;
            }
            set {
                this.file_append_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read extended attributes.
        /// </summary>
        public EntityStateBoolType file_read_ea {
            get {
                return this.file_read_eaField;
            }
            set {
                this.file_read_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write extended attributes.
        /// </summary>
        public EntityStateBoolType file_write_ea {
            get {
                return this.file_write_eaField;
            }
            set {
                this.file_write_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to execute a file, or if a directory, the right to traverse the directory.
        /// </summary>
        public EntityStateBoolType file_execute {
            get {
                return this.file_executeField;
            }
            set {
                this.file_executeField = value;
            }
        }
        
        /// <summary>
        /// Right to delete a directory and all the files it contains (its children), even if the files are read-only.
        /// </summary>
        public EntityStateBoolType file_delete_child {
            get {
                return this.file_delete_childField;
            }
            set {
                this.file_delete_childField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read file, or directory, attributes.
        /// </summary>
        public EntityStateBoolType file_read_attributes {
            get {
                return this.file_read_attributesField;
            }
            set {
                this.file_read_attributesField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to change file, or directory, attributes.
        /// </summary>
        public EntityStateBoolType file_write_attributes {
            get {
                return this.file_write_attributesField;
            }
            set {
                this.file_write_attributesField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The file effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the DACL grants to the trustee or to any groups of which the trustee is a member. The fileeffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileeffectiverights_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileeffectiverights_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A fileeffectiverights_object is defined as a combination of a Windows file and trustee name. The file represents the file to be evaluated while the trustee name represents the account (SID) to check effective rights of. If multiple files or SIDs are matched by either reference, then each possible combination of file and SID is a matching file effective rights object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileEffectiveRightsBehaviors complex type for more information about specific behaviors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileeffectiverights_object : ObjectType {
        
        private object[] itemsField;
        
        private fileeffectiverights_object_ItemsChoices[] _fileeffectiverightsObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileEffectiveRightsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("FileeffectiverightsObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public fileeffectiverights_object_ItemsChoices[] FileeffectiverightsObjectItemsElementName {
            get {
                return this._fileeffectiverightsObjectItemsElementNameField;
            }
            set {
                this._fileeffectiverightsObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum fileeffectiverights_object_ItemsChoices {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        trustee_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The fileeffectiverights_state element defines the different rights that can be associated with a given fileeffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class fileeffectiverights_state : StateType {
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType trustee_nameField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType standard_synchronizeField;
        
        private EntityStateBoolType access_system_securityField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType generic_allField;
        
        private EntityStateBoolType file_read_dataField;
        
        private EntityStateBoolType file_write_dataField;
        
        private EntityStateBoolType file_append_dataField;
        
        private EntityStateBoolType file_read_eaField;
        
        private EntityStateBoolType file_write_eaField;
        
        private EntityStateBoolType file_executeField;
        
        private EntityStateBoolType file_delete_childField;
        
        private EntityStateBoolType file_read_attributesField;
        
        private EntityStateBoolType file_write_attributesField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The filename element specifies the name of the file.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// The unique name associated with a particular security identifier (SID). In Windows, trustee names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, trustee names should be identified in the form: "domain\trustee name". For local trustee names use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType trustee_name {
            get {
                return this.trustee_nameField;
            }
            set {
                this.trustee_nameField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateBoolType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateBoolType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateBoolType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read data from the file, or if a directory, grants the right to list the contents of the directory.
        /// </summary>
        public EntityStateBoolType file_read_data {
            get {
                return this.file_read_dataField;
            }
            set {
                this.file_read_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write data to the file, or if a directory, grants the right to add a file to the directory.
        /// </summary>
        public EntityStateBoolType file_write_data {
            get {
                return this.file_write_dataField;
            }
            set {
                this.file_write_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to append data to the file, or if a directory, grants the right to add a sub-directory to the directory.
        /// </summary>
        public EntityStateBoolType file_append_data {
            get {
                return this.file_append_dataField;
            }
            set {
                this.file_append_dataField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read extended attributes.
        /// </summary>
        public EntityStateBoolType file_read_ea {
            get {
                return this.file_read_eaField;
            }
            set {
                this.file_read_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to write extended attributes.
        /// </summary>
        public EntityStateBoolType file_write_ea {
            get {
                return this.file_write_eaField;
            }
            set {
                this.file_write_eaField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to execute a file, or if a directory, the right to traverse the directory.
        /// </summary>
        public EntityStateBoolType file_execute {
            get {
                return this.file_executeField;
            }
            set {
                this.file_executeField = value;
            }
        }
        
        /// <summary>
        /// Right to delete a directory and all the files it contains (its children), even if the files are read-only.
        /// </summary>
        public EntityStateBoolType file_delete_child {
            get {
                return this.file_delete_childField;
            }
            set {
                this.file_delete_childField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to read file, or directory, attributes.
        /// </summary>
        public EntityStateBoolType file_read_attributes {
            get {
                return this.file_read_attributesField;
            }
            set {
                this.file_read_attributesField = value;
            }
        }
        
        /// <summary>
        /// Grants the right to change file, or directory, attributes.
        /// </summary>
        public EntityStateBoolType file_write_attributes {
            get {
                return this.file_write_attributesField;
            }
            set {
                this.file_write_attributesField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The group_test allows the different users and subgroups, that directly belong to specific groups (identified by name), to be tested.  When the group_test collects the groups on the system, it should only include the local and built-in group accounts and not domain group accounts.  However, it is important to note that domain group accounts can still be looked up. Also, note that the subgroups of the group will not be resolved to find indirect user and group members. If the subgroups need to be resolved, it should be done using the sid_object. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a group_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class group_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The group_object element is used by a group test to define the specific group(s) (identified by name) to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class group_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("group", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The group_state element enumerates the different users and subgroups directly associated with a Windows group. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class group_state : StateType {
        
        private EntityStateStringType groupField;
        
        private EntityStateStringType userField;
        
        private EntityStateStringType subgroupField;
        
        /// <summary>
        /// The group element holds a string that represents the name of a particular group. In Windows, group names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, groups should be identified in the form: "domain\group name". For local groups use: "computer name\group name". For built-in accounts on the system, use the group name without a domain.
        /// </summary>
        public EntityStateStringType group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <summary>
        /// The user element can be included multiple times in a system characteristic item in order to record that a group contains a number of different users. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like user that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <summary>
        /// The subgroup element can be included multiple times in a system characteristic item in order to record that a group contains a number of different subgroups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like the subgroup entity that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType subgroup {
            get {
                return this.subgroupField;
            }
            set {
                this.subgroupField = value;
            }
        }
    }
    
    /// <summary>
    /// The group_sid_test allows the different users and subgroups, that directly belong to specific groups (identified by SID), to be tested. When the group_sid_test collects the group SIDs on the system, it should only include the local and built-in group SIDs and not domain group SIDs.  However, it is important to note that domain group SIDs can still be looked up. Also, note that the subgroups of the group will not be resolved to find indirect user and group members. If the subgroups need to be resolved, it should be done using the sid_sid_object. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a group_sid_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class group_sid_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The group_sid_object element is used by a group_test to define the specific group(s) (identified by SID) to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class group_sid_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("group_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The group_state element enumerates the different users and subgroups directly associated with a Windows group. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class group_sid_state : StateType {
        
        private EntityStateStringType group_sidField;
        
        private EntityStateStringType user_sidField;
        
        private EntityStateStringType subgroup_sidField;
        
        /// <summary>
        /// The group_sid entity holds a string that represents the SID of a particular group.
        /// </summary>
        public EntityStateStringType group_sid {
            get {
                return this.group_sidField;
            }
            set {
                this.group_sidField = value;
            }
        }
        
        /// <summary>
        /// The user_sid entity holds a string that represents the SID of a particular user.  This entity can be included multiple times in a system characteristic item in order to record that a group contains a number of different users. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like user that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType user_sid {
            get {
                return this.user_sidField;
            }
            set {
                this.user_sidField = value;
            }
        }
        
        /// <summary>
        /// The subgroup_sid entity holds a string that represents the SID of particular subgroup in the specified group. This entity can be included multiple times in a system characteristic item in order to record that a group contains a number of different subgroups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like subgroup_sid that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType subgroup_sid {
            get {
                return this.subgroup_sidField;
            }
            set {
                this.subgroup_sidField = value;
            }
        }
    }
    
    /// <summary>
    /// The interface test enumerate various attributes about the interfaces on a system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an interface_object and the optional state element specifies the interface information to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class interface_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// An interface object consists of a single name entity that identifies which interface is being specified. For help understanding this object, see the MIB_IFROW and MIB_IPADDRROW structures.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class interface_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The interface_state element enumerates the different properties associate with a Windows interface. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class interface_state : StateType {
        
        private EntityStateStringType nameField;
        
        private EntityStateIntType indexField;
        
        private EntityStateInterfaceTypeType typeField;
        
        private EntityStateStringType hardware_addrField;
        
        private EntityStateIPAddressStringType inet_addrField;
        
        private EntityStateIPAddressStringType broadcast_addrField;
        
        private EntityStateIPAddressStringType netmaskField;
        
        private EntityStateAddrTypeType addr_typeField;
        
        /// <summary>
        /// The name element specifies the name of an interface.
        /// </summary>
        public EntityStateStringType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <summary>
        /// The index element specifies index that identifies the interface.
        /// </summary>
        public EntityStateIntType index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <summary>
        /// The type element specifies the type of interface which is limited to certain set of values.
        /// </summary>
        public EntityStateInterfaceTypeType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <summary>
        /// The hardware_addr entity is the hardware or MAC address of the physical network card. MAC addresses should be formatted according to the IEEE 802-2001 standard which states that a MAC address is a sequence of six octet values, separated by hyphens, where each octet is represented by two hexadecimal digits.  Uppercase letters should also be used to represent the hexadecimal digits A through F.
        /// </summary>
        public EntityStateStringType hardware_addr {
            get {
                return this.hardware_addrField;
            }
            set {
                this.hardware_addrField = value;
            }
        }
        
        /// <summary>
        /// The inet_addr element specifies the IP address. Note that the IP address can be IPv4 or IPv6. If the IP address is an IPv6 address, this entity will be expressed as an IPv6 address prefix using CIDR notation and the netmask entity will not be collected.
        /// </summary>
        public EntityStateIPAddressStringType inet_addr {
            get {
                return this.inet_addrField;
            }
            set {
                this.inet_addrField = value;
            }
        }
        
        /// <summary>
        /// The broadcast_addr element specifies the broadcast address. A broadcast address is typically the IP address with the host portion set to either all zeros or all ones. Note that the IP address can be IPv4 or IPv6.
        /// </summary>
        public EntityStateIPAddressStringType broadcast_addr {
            get {
                return this.broadcast_addrField;
            }
            set {
                this.broadcast_addrField = value;
            }
        }
        
        /// <summary>
        /// The netmask element specifies the subnet mask for the IP address. Note that if the inet_addr entity contains an IPv6 address prefix, this entity will not be collected.
        /// </summary>
        public EntityStateIPAddressStringType netmask {
            get {
                return this.netmaskField;
            }
            set {
                this.netmaskField = value;
            }
        }
        
        /// <summary>
        /// The addr_type element specifies the address type or state of a specific interface. Each interface can be associated with more than one value meaning the addr_type element can occur multiple times in a system characteristic item. Note that the entity_check attribute associated with EntityStateAddrTypeType guides the evaluation of unbounded entities like addr_type.
        /// </summary>
        public EntityStateAddrTypeType addr_type {
            get {
                return this.addr_typeField;
            }
            set {
                this.addr_typeField = value;
            }
        }
    }
    
    /// <summary>
    /// The lockout policy test enumerates various attributes associated with lockout information for users and global groups in the security database. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a lockoutpolicy_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class lockoutpolicy_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The lockoutpolicy_object element is used by a lockout policy test to define those objects to evaluated based on a specified state. There is actually only one object relating to lockout policy and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check lockout policy will reference the same lockoutpolicy_object which is basically an empty object element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class lockoutpolicy_object : ObjectType {
    }
    
    /// <summary>
    /// The lockoutpolicy_state element specifies the various attributes associated with lockout information for users and global groups in the security database. A lockout policy test will reference a specific instance of this state that defines the exact settings that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class lockoutpolicy_state : StateType {
        
        private EntityStateIntType force_logoffField;
        
        private EntityStateIntType lockout_durationField;
        
        private EntityStateIntType lockout_observation_windowField;
        
        private EntityStateIntType lockout_thresholdField;
        
        /// <summary>
        /// Specifies, in seconds, the amount of time between the end of the valid logon time and the time when the user is forced to log off the network. A value of TIMEQ_FOREVER (-1) indicates that the user is never forced to log off. A value of zero indicates that the user will be forced to log off immediately when the valid logon time expires. See the USER_MODALS_INFO_0 structure returned by a call to NetUserModalsGet().
        /// </summary>
        public EntityStateIntType force_logoff {
            get {
                return this.force_logoffField;
            }
            set {
                this.force_logoffField = value;
            }
        }
        
        /// <summary>
        /// Specifies, in seconds, how long a locked account remains locked before it is automatically unlocked. See the USER_MODALS_INFO_3 structure returned by a call to NetUserModalsGet().
        /// </summary>
        public EntityStateIntType lockout_duration {
            get {
                return this.lockout_durationField;
            }
            set {
                this.lockout_durationField = value;
            }
        }
        
        /// <summary>
        /// Specifies the maximum time, in seconds, that can elapse between any two failed logon attempts before lockout occurs. See the USER_MODALS_INFO_3 structure returned by a call to NetUserModalsGet().
        /// </summary>
        public EntityStateIntType lockout_observation_window {
            get {
                return this.lockout_observation_windowField;
            }
            set {
                this.lockout_observation_windowField = value;
            }
        }
        
        /// <summary>
        /// Specifies the number of invalid password authentications that can occur before an account is marked "locked out." See the USER_MODALS_INFO_3 structure returned by a call to NetUserModalsGet().
        /// </summary>
        public EntityStateIntType lockout_threshold {
            get {
                return this.lockout_thresholdField;
            }
            set {
                this.lockout_thresholdField = value;
            }
        }
    }
    
    /// <summary>
    /// The metabase test is used to check information found in the Windows metabase. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a metabase_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class metabase_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A metabase object defines the key and id of the item(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class metabase_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("id", typeof(EntityObjectIntType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The metabase_state element defines the different metadata associate with a metabase item. This includes the name, user type, data type, and the actual data. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class metabase_state : StateType {
        
        private EntityStateStringType keyField;
        
        private EntityStateIntType id1Field;
        
        private EntityStateStringType nameField;
        
        private EntityStateStringType user_typeField;
        
        private EntityStateStringType data_typeField;
        
        private EntityStateAnySimpleType dataField;
        
        /// <summary>
        /// The key element specifies a metabase key.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("id")]
        public EntityStateIntType id1 {
            get {
                return this.id1Field;
            }
            set {
                this.id1Field = value;
            }
        }
        
        /// <summary>
        /// The name element describes the name of the specified metabase object.
        /// </summary>
        public EntityStateStringType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <summary>
        /// The user_type element is a DWORD that specifies the user type of the data. See the METADATA_RECORD structure.
        /// </summary>
        public EntityStateStringType user_type {
            get {
                return this.user_typeField;
            }
            set {
                this.user_typeField = value;
            }
        }
        
        /// <summary>
        /// The data_type element identifies the type of data in the metabase entry. See the METADATA_RECORD structure.
        /// </summary>
        public EntityStateStringType data_type {
            get {
                return this.data_typeField;
            }
            set {
                this.data_typeField = value;
            }
        }
        
        /// <summary>
        /// The actual data of the named item under the specified metabase key
        /// </summary>
        public EntityStateAnySimpleType data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <summary>
    /// NOTE: This information is stored in the SAM or Active Directory but is encrypted or hidden so the registry_test and activedirectory57_test are of no use. If this can be figured out, then the password_policy test is not needed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class passwordpolicy_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The passwordpolicy_object element is used by a password policy test to define those objects to evaluated based on a specified state. There is actually only one object relating to password policy and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check password policy will reference the same passwordpolicy_object which is basically an empty object element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class passwordpolicy_object : ObjectType {
    }
    
    /// <summary>
    /// The passwordpolicy_state element specifies the various policies associated with passwords. A password policy test will reference a specific instance of this state that defines the exact settings that need to be evaluated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class passwordpolicy_state : StateType {
        
        private EntityStateIntType max_passwd_ageField;
        
        private EntityStateIntType min_passwd_ageField;
        
        private EntityStateIntType min_passwd_lenField;
        
        private EntityStateIntType password_hist_lenField;
        
        private EntityStateBoolType password_complexityField;
        
        private EntityStateBoolType reversible_encryptionField;
        
        /// <summary>
        /// Specifies, in seconds, the maximum allowable password age. A value of TIMEQ_FOREVER (-1) indicates that the password never expires. The minimum valid value for this element is ONE_DAY (86400).
        /// </summary>
        public EntityStateIntType max_passwd_age {
            get {
                return this.max_passwd_ageField;
            }
            set {
                this.max_passwd_ageField = value;
            }
        }
        
        /// <summary>
        /// Specifies the minimum number of seconds that can elapse between the time a password changes and when it can be changed again. A value of zero indicates that no delay is required between password updates.
        /// </summary>
        public EntityStateIntType min_passwd_age {
            get {
                return this.min_passwd_ageField;
            }
            set {
                this.min_passwd_ageField = value;
            }
        }
        
        /// <summary>
        /// Specifies the minimum allowable password length. Valid values for this element are zero through PWLEN.
        /// </summary>
        public EntityStateIntType min_passwd_len {
            get {
                return this.min_passwd_lenField;
            }
            set {
                this.min_passwd_lenField = value;
            }
        }
        
        /// <summary>
        /// Specifies the length of password history maintained. A new password cannot match any of the previous usrmod0_password_hist_len passwords. Valid values for this element are zero through DEF_MAX_PWHIST.
        /// </summary>
        public EntityStateIntType password_hist_len {
            get {
                return this.password_hist_lenField;
            }
            set {
                this.password_hist_lenField = value;
            }
        }
        
        /// <summary>
        /// A boolean value that signifies whether passwords must meet the complexity requirements put forth by the operating system.
        /// </summary>
        public EntityStateBoolType password_complexity {
            get {
                return this.password_complexityField;
            }
            set {
                this.password_complexityField = value;
            }
        }
        
        /// <summary>
        /// Determines whether or not passwords are stored using reversible encryption.
        /// </summary>
        public EntityStateBoolType reversible_encryption {
            get {
                return this.reversible_encryptionField;
            }
            set {
                this.reversible_encryptionField = value;
            }
        }
    }
    
    /// <summary>
    /// The peheader_test is used to check data from a Portable Executable file header. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a peheader_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class peheader_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class peheader_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType11[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType11[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType11 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The peheader_state defines the different metadata associated with the header of a PE file. Please refer to the individual elements in the schema for more details about what each represents. For more information, please see the documentation for the IMAGE_FILE_HEADER and IMAGE_OPTIONAL_HEADER structures.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class peheader_state : StateType {
        
        private EntityStateStringType header_signatureField;
        
        private EntityStatePeTargetMachineType target_machine_typeField;
        
        private EntityStateIntType number_of_sectionsField;
        
        private EntityStateIntType time_date_stampField;
        
        private EntityStateIntType pointer_to_symbol_tableField;
        
        private EntityStateIntType number_of_symbolsField;
        
        private EntityStateIntType size_of_optional_headerField;
        
        private EntityStateBoolType image_file_relocs_strippedField;
        
        private EntityStateBoolType image_file_executable_imageField;
        
        private EntityStateBoolType image_file_line_nums_strippedField;
        
        private EntityStateBoolType image_file_local_syms_strippedField;
        
        private EntityStateBoolType image_file_aggresive_ws_trimField;
        
        private EntityStateBoolType image_file_large_address_awareField;
        
        private EntityStateBoolType image_file_16bit_machineField;
        
        private EntityStateBoolType image_file_bytes_reversed_loField;
        
        private EntityStateBoolType image_file_32bit_machineField;
        
        private EntityStateBoolType image_file_debug_strippedField;
        
        private EntityStateBoolType image_file_removable_run_from_swapField;
        
        private EntityStateBoolType image_file_systemField;
        
        private EntityStateBoolType image_file_dllField;
        
        private EntityStateBoolType image_file_up_system_onlyField;
        
        private EntityStateBoolType image_file_bytes_reveresed_hiField;
        
        private EntityStateIntType magic_numberField;
        
        private EntityStateIntType major_linker_versionField;
        
        private EntityStateIntType minor_linker_versionField;
        
        private EntityStateIntType size_of_codeField;
        
        private EntityStateIntType size_of_initialized_dataField;
        
        private EntityStateIntType size_of_uninitialized_dataField;
        
        private EntityStateIntType address_of_entry_pointField;
        
        private EntityStateIntType base_of_codeField;
        
        private EntityStateIntType base_of_dataField;
        
        private EntityStateIntType image_base_addressField;
        
        private EntityStateIntType section_alignmentField;
        
        private EntityStateIntType file_alignmentField;
        
        private EntityStateIntType major_operating_system_versionField;
        
        private EntityStateIntType minor_operating_system_versionField;
        
        private EntityStateIntType major_image_versionField;
        
        private EntityStateIntType minor_image_versionField;
        
        private EntityStateIntType major_subsystem_versionField;
        
        private EntityStateIntType minor_susbsystem_versionField;
        
        private EntityStateIntType size_of_imageField;
        
        private EntityStateIntType size_of_headersField;
        
        private EntityStateIntType checksumField;
        
        private EntityStatePeSubsystemType subsystemField;
        
        private EntityStateIntType dll_characteristicsField;
        
        private EntityStateIntType size_of_stack_reserveField;
        
        private EntityStateIntType size_of_stack_commitField;
        
        private EntityStateIntType size_of_heap_reserveField;
        
        private EntityStateIntType size_of_heap_commitField;
        
        private EntityStateIntType loader_flagsField;
        
        private EntityStateIntType number_of_rva_and_sizesField;
        
        private EntityStateIntType real_number_of_directory_entriesField;
        
        /// <summary>
        /// The header_signature entity is the signature of the header.
        /// </summary>
        public EntityStateStringType header_signature {
            get {
                return this.header_signatureField;
            }
            set {
                this.header_signatureField = value;
            }
        }
        
        /// <summary>
        /// The target_machine_type entity is a WORD that specifies the target architecture that the file is intended for.
        /// </summary>
        public EntityStatePeTargetMachineType target_machine_type {
            get {
                return this.target_machine_typeField;
            }
            set {
                this.target_machine_typeField = value;
            }
        }
        
        /// <summary>
        /// The number_of_sections entity is a WORD that specifies the number of sections in the file.
        /// </summary>
        public EntityStateIntType number_of_sections {
            get {
                return this.number_of_sectionsField;
            }
            set {
                this.number_of_sectionsField = value;
            }
        }
        
        /// <summary>
        /// The time_date_stamp entity is a DWORD that specifies the time that the linker produced the file. The value is represented as the number of seconds since January 1, 1970, 00:00:00.
        /// </summary>
        public EntityStateIntType time_date_stamp {
            get {
                return this.time_date_stampField;
            }
            set {
                this.time_date_stampField = value;
            }
        }
        
        /// <summary>
        /// The pointer_to_symbol_table entity is a DWORD that specifies the file offset of the COFF symbol table.
        /// </summary>
        public EntityStateIntType pointer_to_symbol_table {
            get {
                return this.pointer_to_symbol_tableField;
            }
            set {
                this.pointer_to_symbol_tableField = value;
            }
        }
        
        /// <summary>
        /// The number_of_symbols entity is a DWORD that specifies the number of symbols in the COFF symbol table.
        /// </summary>
        public EntityStateIntType number_of_symbols {
            get {
                return this.number_of_symbolsField;
            }
            set {
                this.number_of_symbolsField = value;
            }
        }
        
        /// <summary>
        /// The size_of_optional_header entity is a DWORD that specifies the size of an optional header in bytes.
        /// </summary>
        public EntityStateIntType size_of_optional_header {
            get {
                return this.size_of_optional_headerField;
            }
            set {
                this.size_of_optional_headerField = value;
            }
        }
        
        /// <summary>
        /// The image_file_relocs_stripped entity is a boolean value that specifies if the relocation information is stripped from the file.
        /// </summary>
        public EntityStateBoolType image_file_relocs_stripped {
            get {
                return this.image_file_relocs_strippedField;
            }
            set {
                this.image_file_relocs_strippedField = value;
            }
        }
        
        /// <summary>
        /// The image_file_executable_image entity is a boolean value that specifies if the file is executable.
        /// </summary>
        public EntityStateBoolType image_file_executable_image {
            get {
                return this.image_file_executable_imageField;
            }
            set {
                this.image_file_executable_imageField = value;
            }
        }
        
        /// <summary>
        /// The image_file_line_nums_stripped entity is a boolean value that specifies if the line numbers are stripped from the file.
        /// </summary>
        public EntityStateBoolType image_file_line_nums_stripped {
            get {
                return this.image_file_line_nums_strippedField;
            }
            set {
                this.image_file_line_nums_strippedField = value;
            }
        }
        
        /// <summary>
        /// The image_file_local_syms_stripped entity is a boolean value that specifies if the local symbols are stripped from the file.
        /// </summary>
        public EntityStateBoolType image_file_local_syms_stripped {
            get {
                return this.image_file_local_syms_strippedField;
            }
            set {
                this.image_file_local_syms_strippedField = value;
            }
        }
        
        /// <summary>
        /// The image_file_aggressive_ws_trim entity is a boolean value that specifies that the working set should be aggressively trimmed.
        /// </summary>
        public EntityStateBoolType image_file_aggresive_ws_trim {
            get {
                return this.image_file_aggresive_ws_trimField;
            }
            set {
                this.image_file_aggresive_ws_trimField = value;
            }
        }
        
        /// <summary>
        /// The image_file_large_address_aware entity is a boolean value that specifies that the application can handle addresses larger than 2GB.
        /// </summary>
        public EntityStateBoolType image_file_large_address_aware {
            get {
                return this.image_file_large_address_awareField;
            }
            set {
                this.image_file_large_address_awareField = value;
            }
        }
        
        /// <summary>
        /// The image_file_16bit_machine entity is a boolean value that specifies that the computer supports 16-bit words.
        /// </summary>
        public EntityStateBoolType image_file_16bit_machine {
            get {
                return this.image_file_16bit_machineField;
            }
            set {
                this.image_file_16bit_machineField = value;
            }
        }
        
        /// <summary>
        /// The image_file_bytes_reversed_lo entity is a boolean value that specifies that the bytes of the word are reversed.
        /// </summary>
        public EntityStateBoolType image_file_bytes_reversed_lo {
            get {
                return this.image_file_bytes_reversed_loField;
            }
            set {
                this.image_file_bytes_reversed_loField = value;
            }
        }
        
        /// <summary>
        /// The image_file_32bit_machine entity is a boolean value that specifies that the computer supports 32-bit words.
        /// </summary>
        public EntityStateBoolType image_file_32bit_machine {
            get {
                return this.image_file_32bit_machineField;
            }
            set {
                this.image_file_32bit_machineField = value;
            }
        }
        
        /// <summary>
        /// The image_file_debug_stripped entity is a boolean value that specifies that the debugging information is stored separately in a .dbg file.
        /// </summary>
        public EntityStateBoolType image_file_debug_stripped {
            get {
                return this.image_file_debug_strippedField;
            }
            set {
                this.image_file_debug_strippedField = value;
            }
        }
        
        /// <summary>
        /// The image_file_removable_run_from_swap entity is a boolean value that specifies that the image is on removable media, copy and run from the swap file.
        /// </summary>
        public EntityStateBoolType image_file_removable_run_from_swap {
            get {
                return this.image_file_removable_run_from_swapField;
            }
            set {
                this.image_file_removable_run_from_swapField = value;
            }
        }
        
        /// <summary>
        /// The image_file_system entity is a boolean value that specifies that the image is a system file.
        /// </summary>
        public EntityStateBoolType image_file_system {
            get {
                return this.image_file_systemField;
            }
            set {
                this.image_file_systemField = value;
            }
        }
        
        /// <summary>
        /// The image_file_dll entity is a boolean value that specifies that the image is a DLL.
        /// </summary>
        public EntityStateBoolType image_file_dll {
            get {
                return this.image_file_dllField;
            }
            set {
                this.image_file_dllField = value;
            }
        }
        
        /// <summary>
        /// The image_file_up_system_only entity is a boolean value that specifies that the file should only be run on a uniprocessor computer.
        /// </summary>
        public EntityStateBoolType image_file_up_system_only {
            get {
                return this.image_file_up_system_onlyField;
            }
            set {
                this.image_file_up_system_onlyField = value;
            }
        }
        
        /// <summary>
        /// The image_file_bytes_reversed_hi entity is a boolean value that specifies that the bytes of the word are reversed.
        /// </summary>
        public EntityStateBoolType image_file_bytes_reveresed_hi {
            get {
                return this.image_file_bytes_reveresed_hiField;
            }
            set {
                this.image_file_bytes_reveresed_hiField = value;
            }
        }
        
        /// <summary>
        /// The magic_number entity is a WORD that specifies the state of the image file.
        /// </summary>
        public EntityStateIntType magic_number {
            get {
                return this.magic_numberField;
            }
            set {
                this.magic_numberField = value;
            }
        }
        
        /// <summary>
        /// The major_linker_version entity is a BYTE that specifies the major version of the linker that produced the file.
        /// </summary>
        public EntityStateIntType major_linker_version {
            get {
                return this.major_linker_versionField;
            }
            set {
                this.major_linker_versionField = value;
            }
        }
        
        /// <summary>
        /// The minor_linker_version entity is a BYTE that specifies the minor version of the linker that produced the file.
        /// </summary>
        public EntityStateIntType minor_linker_version {
            get {
                return this.minor_linker_versionField;
            }
            set {
                this.minor_linker_versionField = value;
            }
        }
        
        /// <summary>
        /// The size_of_code entity is a DWORD that specifies the total size of all of the code sections.
        /// </summary>
        public EntityStateIntType size_of_code {
            get {
                return this.size_of_codeField;
            }
            set {
                this.size_of_codeField = value;
            }
        }
        
        /// <summary>
        /// The size_of_initialized_data entity is a DWORD that specifies the total size of all of the sections that are composed of initialized data.
        /// </summary>
        public EntityStateIntType size_of_initialized_data {
            get {
                return this.size_of_initialized_dataField;
            }
            set {
                this.size_of_initialized_dataField = value;
            }
        }
        
        /// <summary>
        /// The size_of_uninitialized_data entity is a DWORD that specifies the total size of all of the sections that are composed of uninitialized data.
        /// </summary>
        public EntityStateIntType size_of_uninitialized_data {
            get {
                return this.size_of_uninitialized_dataField;
            }
            set {
                this.size_of_uninitialized_dataField = value;
            }
        }
        
        /// <summary>
        /// The address_of_entry_point entity is a DWORD that specifies the address where the loader will begin execution.
        /// </summary>
        public EntityStateIntType address_of_entry_point {
            get {
                return this.address_of_entry_pointField;
            }
            set {
                this.address_of_entry_pointField = value;
            }
        }
        
        /// <summary>
        /// The base_of_code entity is a DWORD that specifies the relative virtual address where the file's code section begins.
        /// </summary>
        public EntityStateIntType base_of_code {
            get {
                return this.base_of_codeField;
            }
            set {
                this.base_of_codeField = value;
            }
        }
        
        /// <summary>
        /// The base_of_data entity is a DWORD that specifies the relative virtual address where the file's data section begins.
        /// </summary>
        public EntityStateIntType base_of_data {
            get {
                return this.base_of_dataField;
            }
            set {
                this.base_of_dataField = value;
            }
        }
        
        /// <summary>
        /// The image_base_address entity is a DWORD that specifies the preferred address fo the first byte of the image when it is loaded into memory.
        /// </summary>
        public EntityStateIntType image_base_address {
            get {
                return this.image_base_addressField;
            }
            set {
                this.image_base_addressField = value;
            }
        }
        
        /// <summary>
        /// The section_alignment entity is a DWORD that specifies the alignment of the sections loaded into memory.
        /// </summary>
        public EntityStateIntType section_alignment {
            get {
                return this.section_alignmentField;
            }
            set {
                this.section_alignmentField = value;
            }
        }
        
        /// <summary>
        /// The file_alignment entity is a DWORD that specifies the alignment of the raw data of sections in the image file.
        /// </summary>
        public EntityStateIntType file_alignment {
            get {
                return this.file_alignmentField;
            }
            set {
                this.file_alignmentField = value;
            }
        }
        
        /// <summary>
        /// The major_operating_system_version entity is a WORD that specifies the major version of the operating system required to use this executable.
        /// </summary>
        public EntityStateIntType major_operating_system_version {
            get {
                return this.major_operating_system_versionField;
            }
            set {
                this.major_operating_system_versionField = value;
            }
        }
        
        /// <summary>
        /// The minor_operating_system_version entity is a WORD that specifies the minor version of the operating system required to use this executable.
        /// </summary>
        public EntityStateIntType minor_operating_system_version {
            get {
                return this.minor_operating_system_versionField;
            }
            set {
                this.minor_operating_system_versionField = value;
            }
        }
        
        /// <summary>
        /// The major_image_version entity is a WORD that specifies the major version number of the image.
        /// </summary>
        public EntityStateIntType major_image_version {
            get {
                return this.major_image_versionField;
            }
            set {
                this.major_image_versionField = value;
            }
        }
        
        /// <summary>
        /// The minor_image_version entity is a DWORD that specifies the minor version number of the image.
        /// </summary>
        public EntityStateIntType minor_image_version {
            get {
                return this.minor_image_versionField;
            }
            set {
                this.minor_image_versionField = value;
            }
        }
        
        /// <summary>
        /// The major_subsystem_version entity is a WORD that specifies the major version of the subsystem required to run the executable.
        /// </summary>
        public EntityStateIntType major_subsystem_version {
            get {
                return this.major_subsystem_versionField;
            }
            set {
                this.major_subsystem_versionField = value;
            }
        }
        
        /// <summary>
        /// The minor_subsystem_version entity is a WORD that specifies the minor version of the subsystem required to run the executable.
        /// </summary>
        public EntityStateIntType minor_susbsystem_version {
            get {
                return this.minor_susbsystem_versionField;
            }
            set {
                this.minor_susbsystem_versionField = value;
            }
        }
        
        /// <summary>
        /// The size_of_image entity is a DWORD that specifies the total size of the image including all of the headers.
        /// </summary>
        public EntityStateIntType size_of_image {
            get {
                return this.size_of_imageField;
            }
            set {
                this.size_of_imageField = value;
            }
        }
        
        /// <summary>
        /// The size_of_headers entity is a DWORD that specifies the total combined size of the MS-DOS stub, PE header, and the section headers.
        /// </summary>
        public EntityStateIntType size_of_headers {
            get {
                return this.size_of_headersField;
            }
            set {
                this.size_of_headersField = value;
            }
        }
        
        /// <summary>
        /// The checksum entity is a DWORD that specifies the checksum of the image file.
        /// </summary>
        public EntityStateIntType checksum {
            get {
                return this.checksumField;
            }
            set {
                this.checksumField = value;
            }
        }
        
        /// <summary>
        /// The subsystem entity is a DWORD that specifies the type of subsystem that the executable uses for its user interface.
        /// </summary>
        public EntityStatePeSubsystemType subsystem {
            get {
                return this.subsystemField;
            }
            set {
                this.subsystemField = value;
            }
        }
        
        /// <summary>
        /// The dll_characteristics entity is a DWORD that specifies the set of flags indicating the circumstances under which a DLL's initialization function will be called..
        /// </summary>
        public EntityStateIntType dll_characteristics {
            get {
                return this.dll_characteristicsField;
            }
            set {
                this.dll_characteristicsField = value;
            }
        }
        
        /// <summary>
        /// The time_date_stamp entity is a DWORD that specifies the number of bytes to reserve for the stack.
        /// </summary>
        public EntityStateIntType size_of_stack_reserve {
            get {
                return this.size_of_stack_reserveField;
            }
            set {
                this.size_of_stack_reserveField = value;
            }
        }
        
        /// <summary>
        /// The time_date_stamp entity is a DWORD that specifies the number of bytes to commit for the stack.
        /// </summary>
        public EntityStateIntType size_of_stack_commit {
            get {
                return this.size_of_stack_commitField;
            }
            set {
                this.size_of_stack_commitField = value;
            }
        }
        
        /// <summary>
        /// The time_date_stamp entity is a DWORD that specifies the number of bytes to reserve for the local heap.
        /// </summary>
        public EntityStateIntType size_of_heap_reserve {
            get {
                return this.size_of_heap_reserveField;
            }
            set {
                this.size_of_heap_reserveField = value;
            }
        }
        
        /// <summary>
        /// The time_date_stamp entity is a DWORD that specifies the number of bytes to commit for the local heap.
        /// </summary>
        public EntityStateIntType size_of_heap_commit {
            get {
                return this.size_of_heap_commitField;
            }
            set {
                this.size_of_heap_commitField = value;
            }
        }
        
        /// <summary>
        /// The loader_flags entity is a DWORD that specifies the loader flags of the header.
        /// </summary>
        public EntityStateIntType loader_flags {
            get {
                return this.loader_flagsField;
            }
            set {
                this.loader_flagsField = value;
            }
        }
        
        /// <summary>
        /// The number_of_rva_and_sizes entity is a DWORD that specifies the number of directory entries in the remainder of the optional header.
        /// </summary>
        public EntityStateIntType number_of_rva_and_sizes {
            get {
                return this.number_of_rva_and_sizesField;
            }
            set {
                this.number_of_rva_and_sizesField = value;
            }
        }
        
        /// <summary>
        /// The real_number_of_directory_entries entity is the real number of data directory entries in the remainder of the optional header calculated by enumerating the directory entries.
        /// </summary>
        public EntityStateIntType real_number_of_directory_entries {
            get {
                return this.real_number_of_directory_entriesField;
            }
            set {
                this.real_number_of_directory_entriesField = value;
            }
        }
    }
    
    /// <summary>
    /// The port test is used to check information about the available ports on a Windows system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a port_object and the optional state element specifies the port information to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class port_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A port object defines the local address, port number, and protocol of the port(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class port_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("local_address", typeof(EntityObjectIPAddressStringType))]
        [System.Xml.Serialization.XmlElementAttribute("local_port", typeof(EntityObjectIntType))]
        [System.Xml.Serialization.XmlElementAttribute("protocol", typeof(EntityObjectProtocolType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The port_state element defines the different metadata associate with a Windows port. This includes the local address, port number, protocol, and pid. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class port_state : StateType {
        
        private EntityStateIPAddressStringType local_addressField;
        
        private EntityStateIntType local_portField;
        
        private EntityStateProtocolType protocolField;
        
        private EntityStateIntType pidField;
        
        private EntityStateIPAddressStringType foreign_addressField;
        
        private EntityStateStringType foreign_portField;
        
        /// <summary>
        /// This element specifies the local IP address the listening port is bound to. Note that the IP address can be IPv4 or IPv6.
        /// </summary>
        public EntityStateIPAddressStringType local_address {
            get {
                return this.local_addressField;
            }
            set {
                this.local_addressField = value;
            }
        }
        
        /// <summary>
        /// This element specifies the number assigned to the local listening port.
        /// </summary>
        public EntityStateIntType local_port {
            get {
                return this.local_portField;
            }
            set {
                this.local_portField = value;
            }
        }
        
        /// <summary>
        /// This element specifies the type of listening port. It is restricted to either TCP or UDP.
        /// </summary>
        public EntityStateProtocolType protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <summary>
        /// The id given to the process that is associated with the specified listening port.
        /// </summary>
        public EntityStateIntType pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
            }
        }
        
        /// <summary>
        /// This is the IP address with which the program is communicating, or with which it will communicate, in the case of a listening server. Note that the IP address can be IPv4 or IPv6.
        /// </summary>
        public EntityStateIPAddressStringType foreign_address {
            get {
                return this.foreign_addressField;
            }
            set {
                this.foreign_addressField = value;
            }
        }
        
        /// <summary>
        /// This is the TCP or UDP port to which the program communicates.
        /// </summary>
        public EntityStateStringType foreign_port {
            get {
                return this.foreign_portField;
            }
            set {
                this.foreign_portField = value;
            }
        }
    }
    
    /// <summary>
    /// The printer effective rights test is used to check the effective rights associated with Windows printers. The printereffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a printereffectiverights_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class printereffectiverights_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class printereffectiverights_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType12[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(PrinterEffectiveRightsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("printer_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType12[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class PrinterEffectiveRightsBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public PrinterEffectiveRightsBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType12 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        printer_name,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The printereffectiverights_state element defines the different rights that can be associated with a given printereffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class printereffectiverights_state : StateType {
        
        private EntityStateStringType printer_nameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType standard_synchronizeField;
        
        private EntityStateBoolType access_system_securityField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType generic_allField;
        
        private EntityStateBoolType printer_access_administerField;
        
        private EntityStateBoolType printer_access_useField;
        
        private EntityStateBoolType job_access_administerField;
        
        private EntityStateBoolType job_access_readField;
        
        /// <summary>
        /// This element specifies the name of the printer.
        /// </summary>
        public EntityStateStringType printer_name {
            get {
                return this.printer_nameField;
            }
            set {
                this.printer_nameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateBoolType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateBoolType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateBoolType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        public EntityStateBoolType printer_access_administer {
            get {
                return this.printer_access_administerField;
            }
            set {
                this.printer_access_administerField = value;
            }
        }
        
        public EntityStateBoolType printer_access_use {
            get {
                return this.printer_access_useField;
            }
            set {
                this.printer_access_useField = value;
            }
        }
        
        public EntityStateBoolType job_access_administer {
            get {
                return this.job_access_administerField;
            }
            set {
                this.job_access_administerField = value;
            }
        }
        
        public EntityStateBoolType job_access_read {
            get {
                return this.job_access_readField;
            }
            set {
                this.job_access_readField = value;
            }
        }
    }
    
    /// <summary>
    /// The process_test is used to check information found in the Windows processes. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a process_object and the optional state element references a process_state element that specifies the process information to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class process_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A process_object defines the command line used to start the process(es).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class process_object : ObjectType {
        
        private object itemField;
        
        [System.Xml.Serialization.XmlElementAttribute("command_line", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <summary>
    /// The process_state element defines the different metadata associate with a Windows process. This includes the command line, pid, ppid, image path, and current directory. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class process_state : StateType {
        
        private EntityStateStringType command_lineField;
        
        private EntityStateIntType pidField;
        
        private EntityStateIntType ppidField;
        
        private EntityStateStringType priorityField;
        
        private EntityStateStringType image_pathField;
        
        private EntityStateStringType current_dirField;
        
        /// <summary>
        /// The command_line entity is the string used to start the process. This includes any parameters that are part of the command line.
        /// </summary>
        public EntityStateStringType command_line {
            get {
                return this.command_lineField;
            }
            set {
                this.command_lineField = value;
            }
        }
        
        /// <summary>
        /// The id given to the process that is created for a specified command line.
        /// </summary>
        public EntityStateIntType pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
            }
        }
        
        /// <summary>
        /// The id given to the parent of the process that is created for the specified command line
        /// </summary>
        public EntityStateIntType ppid {
            get {
                return this.ppidField;
            }
            set {
                this.ppidField = value;
            }
        }
        
        /// <summary>
        /// The base priority of the process.
        /// </summary>
        public EntityStateStringType priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <summary>
        /// The image_path entity contains the name of the executable file in question.
        /// </summary>
        public EntityStateStringType image_path {
            get {
                return this.image_pathField;
            }
            set {
                this.image_pathField = value;
            }
        }
        
        /// <summary>
        /// The current_directory entity represents the current path to the executable.
        /// </summary>
        public EntityStateStringType current_dir {
            get {
                return this.current_dirField;
            }
            set {
                this.current_dirField = value;
            }
        }
    }
    
    /// <summary>
    /// The process58_test is used to check information found in the Windows processes. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a process58_object and the optional state element references a process58_state element that specifies the process information to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class process58_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A process58_object defines the command line used to start the process(es)and pid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class process58_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("command_line", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("pid", typeof(EntityObjectIntType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The process58_state element defines the different metadata associate with a Windows process. This includes the command line, pid, ppid, image path, and current directory. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class process58_state : StateType {
        
        private EntityStateStringType command_lineField;
        
        private EntityStateIntType pidField;
        
        private EntityStateIntType ppidField;
        
        private EntityStateStringType priorityField;
        
        private EntityStateStringType image_pathField;
        
        private EntityStateStringType current_dirField;
        
        private EntityStateIntType creation_timeField;
        
        private EntityStateBoolType dep_enabledField;
        
        private EntityStateStringType primary_window_textField;
        
        /// <summary>
        /// The command_line entity is the string used to start the process. This includes any parameters that are part of the command line.
        /// </summary>
        public EntityStateStringType command_line {
            get {
                return this.command_lineField;
            }
            set {
                this.command_lineField = value;
            }
        }
        
        /// <summary>
        /// The id given to the process that is created for a specified command line.
        /// </summary>
        public EntityStateIntType pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
            }
        }
        
        /// <summary>
        /// The id given to the parent of the process that is created for the specified command line
        /// </summary>
        public EntityStateIntType ppid {
            get {
                return this.ppidField;
            }
            set {
                this.ppidField = value;
            }
        }
        
        /// <summary>
        /// The base priority of the process.
        /// </summary>
        public EntityStateStringType priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <summary>
        /// The image_path entity represents the name of the executable file for the process.
        /// </summary>
        public EntityStateStringType image_path {
            get {
                return this.image_pathField;
            }
            set {
                this.image_pathField = value;
            }
        }
        
        /// <summary>
        /// The current_dir entity represents the current path to the executable file for the process.
        /// </summary>
        public EntityStateStringType current_dir {
            get {
                return this.current_dirField;
            }
            set {
                this.current_dirField = value;
            }
        }
        
        /// <summary>
        /// The creation_time entity represents the creation time of the process. The value of this entity represents the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC). See the GetProcessTimes function lpCreationTime.
        /// </summary>
        public EntityStateIntType creation_time {
            get {
                return this.creation_timeField;
            }
            set {
                this.creation_timeField = value;
            }
        }
        
        /// <summary>
        /// The dep_enabled entity represents whether or not data execution prevention (DEP) is enabled. See the GetProcessDEPPolicy lpFlags.
        /// </summary>
        public EntityStateBoolType dep_enabled {
            get {
                return this.dep_enabledField;
            }
            set {
                this.dep_enabledField = value;
            }
        }
        
        /// <summary>
        /// The primary_window_text entity represents the title of the primary window of the process. See the GetWindowText function.
        /// </summary>
        public EntityStateStringType primary_window_text {
            get {
                return this.primary_window_textField;
            }
            set {
                this.primary_window_textField = value;
            }
        }
    }
    
    /// <summary>
    /// The registry test is used to check metadata associated with Windows registry key. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a registry_object and the optional state element specifies the registry data to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class registry_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class registry_object : ObjectType {
        
        private object[] itemsField;
        
        private registry_object_ItemsChoices[] _registryObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(RegistryBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("hive", typeof(EntityObjectRegistryHiveType))]
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("name", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("RegistryObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public registry_object_ItemsChoices[] RegistryObjectItemsElementName {
            get {
                return this._registryObjectItemsElementNameField;
            }
            set {
                this._registryObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegkeyEffectiveRightsBehaviors))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegkeyEffectiveRights53Behaviors))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegkeyAuditPermissionsBehaviors))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegkeyAuditPermissions53Behaviors))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class RegistryBehaviors {
        
        private string max_depthField;
        
        private RegistryBehaviorsRecurse_direction recurse_directionField;
        
        private RegistryBehaviorsWindows_view windows_viewField;
        
        public RegistryBehaviors() {
            this.max_depthField = "-1";
            this.recurse_directionField = RegistryBehaviorsRecurse_direction.none;
            this.windows_viewField = RegistryBehaviorsWindows_view.Item64_bit;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        [System.ComponentModel.DefaultValueAttribute("-1")]
        public string max_depth {
            get {
                return this.max_depthField;
            }
            set {
                this.max_depthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RegistryBehaviorsRecurse_direction.none)]
        public RegistryBehaviorsRecurse_direction recurse_direction {
            get {
                return this.recurse_directionField;
            }
            set {
                this.recurse_directionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RegistryBehaviorsWindows_view.Item64_bit)]
        public RegistryBehaviorsWindows_view windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    public enum RegistryBehaviorsRecurse_direction {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    public enum RegistryBehaviorsWindows_view {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("32_bit")]
        Item32_bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64_bit")]
        Item64_bit,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class RegkeyEffectiveRightsBehaviors : RegistryBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public RegkeyEffectiveRightsBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class RegkeyEffectiveRights53Behaviors : RegistryBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public RegkeyEffectiveRights53Behaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class RegkeyAuditPermissionsBehaviors : RegistryBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public RegkeyAuditPermissionsBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class RegkeyAuditPermissions53Behaviors : RegistryBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public RegkeyAuditPermissions53Behaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum registry_object_ItemsChoices {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        hive,
        
        /// <remarks/>
        key,
        
        /// <remarks/>
        name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The registry_state element defines the different metadata associate with a Windows registry key. This includes the hive, key, name, type, and value. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class registry_state : StateType {
        
        private EntityStateRegistryHiveType hiveField;
        
        private EntityStateStringType keyField;
        
        private EntityStateStringType nameField;
        
        private EntityStateIntType last_write_timeField;
        
        private EntityStateRegistryTypeType typeField;
        
        private EntityStateAnySimpleType valueField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.
        /// </summary>
        public EntityStateRegistryHiveType hive {
            get {
                return this.hiveField;
            }
            set {
                this.hiveField = value;
            }
        }
        
        /// <summary>
        /// This element describes a registry key to be tested. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <summary>
        /// This element describes the name of a value of a registry key. If the xsi:nil attribute is set to true, then the name element should not be used in analysis.
        /// </summary>
        public EntityStateStringType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <summary>
        /// The last time that the key or any of its value entries was modified. The value of this entity represents the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC). Last write time can be queried on a hive, key, or name. When collecting only information about a registry hive the last write time will be the time the hive or any of its entiries was written to. When collecting only information about a registry hive and key the last write time will be the time the key or any of its entiries was written to. When collecting only information about a registry name the last write time will be the time the name was written to. See the RegQueryInfoKey function lpftLastWriteTime.
        /// </summary>
        public EntityStateIntType last_write_time {
            get {
                return this.last_write_timeField;
            }
            set {
                this.last_write_timeField = value;
            }
        }
        
        /// <summary>
        /// The type entity allows a test to be written against the registy type associated with the specified registry key(s). Please refer to the documentation on the EntityStateRegistryTypeType for more information about the different valid individual types.
        /// </summary>
        public EntityStateRegistryTypeType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <summary>
        /// Note that if the intent is to test a version number held in the registry (as a reg_sz) then instead of setting the datatype to 'string', the datatype can be set to 'version'. This allows tools performing the evaluation to know how to perform less than and greater than operations correctly.
        /// </summary>
        public EntityStateAnySimpleType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The registry key audited permissions test is used to check the audit permissions associated with Windows registry keys. Note that the trustee's audited permissions are the audit permissons that the SACL grants to the trustee or to any groups of which the trustee is a member. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyauditedpermissions53_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyauditedpermissions53_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A regkeyauditedpermissions53_object is defined as a combination of a Windows registry key and trustee name. The hive and key elements represents the registry key to be evaluated while the trustee name represents the account (SID) to check audited permissions of. If multiple keys or SIDs are matched by either reference, then each possible combination of registry key and SID is a matching registry key audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the RegkeyAuditPermissions53Behaviors complex type for more information about specific behaviors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyauditedpermissions53_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType14[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(RegkeyAuditPermissions53Behaviors))]
        [System.Xml.Serialization.XmlElementAttribute("hive", typeof(EntityObjectRegistryHiveType))]
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType14[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType14 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        hive,
        
        /// <remarks/>
        key,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The regkeyauditedpermissions53_state element defines the different audit permissions that can be associated with a given regkeyauditedpermissions53_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyauditedpermissions53_state : StateType {
        
        private EntityStateRegistryHiveType hiveField;
        
        private EntityStateStringType keyField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateAuditType standard_deleteField;
        
        private EntityStateAuditType standard_read_controlField;
        
        private EntityStateAuditType standard_write_dacField;
        
        private EntityStateAuditType standard_write_ownerField;
        
        private EntityStateAuditType standard_synchronizeField;
        
        private EntityStateAuditType access_system_securityField;
        
        private EntityStateAuditType generic_readField;
        
        private EntityStateAuditType generic_writeField;
        
        private EntityStateAuditType generic_executeField;
        
        private EntityStateAuditType generic_allField;
        
        private EntityStateAuditType key_query_valueField;
        
        private EntityStateAuditType key_set_valueField;
        
        private EntityStateAuditType key_create_sub_keyField;
        
        private EntityStateAuditType key_enumerate_sub_keysField;
        
        private EntityStateAuditType key_notifyField;
        
        private EntityStateAuditType key_create_linkField;
        
        private EntityStateAuditType key_wow64_64keyField;
        
        private EntityStateAuditType key_wow64_32keyField;
        
        private EntityStateAuditType key_wow64_resField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// This element specifies the hive of a registry key on the machine from which to retrieve the SACL.
        /// </summary>
        public EntityStateRegistryHiveType hive {
            get {
                return this.hiveField;
            }
            set {
                this.hiveField = value;
            }
        }
        
        /// <summary>
        /// This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateAuditType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateAuditType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateAuditType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateAuditType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateAuditType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateAuditType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateAuditType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateAuditType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        public EntityStateAuditType key_query_value {
            get {
                return this.key_query_valueField;
            }
            set {
                this.key_query_valueField = value;
            }
        }
        
        public EntityStateAuditType key_set_value {
            get {
                return this.key_set_valueField;
            }
            set {
                this.key_set_valueField = value;
            }
        }
        
        public EntityStateAuditType key_create_sub_key {
            get {
                return this.key_create_sub_keyField;
            }
            set {
                this.key_create_sub_keyField = value;
            }
        }
        
        public EntityStateAuditType key_enumerate_sub_keys {
            get {
                return this.key_enumerate_sub_keysField;
            }
            set {
                this.key_enumerate_sub_keysField = value;
            }
        }
        
        public EntityStateAuditType key_notify {
            get {
                return this.key_notifyField;
            }
            set {
                this.key_notifyField = value;
            }
        }
        
        public EntityStateAuditType key_create_link {
            get {
                return this.key_create_linkField;
            }
            set {
                this.key_create_linkField = value;
            }
        }
        
        public EntityStateAuditType key_wow64_64key {
            get {
                return this.key_wow64_64keyField;
            }
            set {
                this.key_wow64_64keyField = value;
            }
        }
        
        public EntityStateAuditType key_wow64_32key {
            get {
                return this.key_wow64_32keyField;
            }
            set {
                this.key_wow64_32keyField = value;
            }
        }
        
        public EntityStateAuditType key_wow64_res {
            get {
                return this.key_wow64_resField;
            }
            set {
                this.key_wow64_resField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The registry key audited permissions test is used to check the audit permissions associated with Windows registry keys. Note that the trustee's audited permissions are the audit permissons that the SACL grants to the trustee or to any groups of which the trustee is a member. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyauditedpermissions_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyauditedpermissions_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A regkeyauditedpermissions_object is defined as a combination of a Windows registry key and trustee name. The hive and key elements represents the registry key to be evaluated while the trustee name represents the account (SID) to check audited permissions of. If multiple keys or SIDs are matched by either reference, then each possible combination of file and SID is a matching file audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the RegkeyAuditPermissionsBehaviors complex type for more information about specific behaviors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyauditedpermissions_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType15[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(RegkeyAuditPermissionsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("hive", typeof(EntityObjectRegistryHiveType))]
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType15[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType15 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        hive,
        
        /// <remarks/>
        key,
        
        /// <remarks/>
        trustee_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The regkeyauditedpermissions_state element defines the different audit permissions that can be associated with a given regkeyauditedpermissions_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyauditedpermissions_state : StateType {
        
        private EntityStateRegistryHiveType hiveField;
        
        private EntityStateStringType keyField;
        
        private EntityStateStringType trustee_nameField;
        
        private EntityStateAuditType standard_deleteField;
        
        private EntityStateAuditType standard_read_controlField;
        
        private EntityStateAuditType standard_write_dacField;
        
        private EntityStateAuditType standard_write_ownerField;
        
        private EntityStateAuditType standard_synchronizeField;
        
        private EntityStateAuditType access_system_securityField;
        
        private EntityStateAuditType generic_readField;
        
        private EntityStateAuditType generic_writeField;
        
        private EntityStateAuditType generic_executeField;
        
        private EntityStateAuditType generic_allField;
        
        private EntityStateAuditType key_query_valueField;
        
        private EntityStateAuditType key_set_valueField;
        
        private EntityStateAuditType key_create_sub_keyField;
        
        private EntityStateAuditType key_enumerate_sub_keysField;
        
        private EntityStateAuditType key_notifyField;
        
        private EntityStateAuditType key_create_linkField;
        
        private EntityStateAuditType key_wow64_64keyField;
        
        private EntityStateAuditType key_wow64_32keyField;
        
        private EntityStateAuditType key_wow64_resField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// This element specifies the hive of a registry key on the machine from which to retrieve the SACL.
        /// </summary>
        public EntityStateRegistryHiveType hive {
            get {
                return this.hiveField;
            }
            set {
                this.hiveField = value;
            }
        }
        
        /// <summary>
        /// This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <summary>
        /// The unique name associated with a particular security identifier (SID). In Windows, trustee names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, trustee names should be identified in the form: "domain\trustee name". For local trustee names use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType trustee_name {
            get {
                return this.trustee_nameField;
            }
            set {
                this.trustee_nameField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateAuditType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateAuditType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateAuditType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateAuditType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateAuditType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateAuditType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateAuditType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateAuditType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        public EntityStateAuditType key_query_value {
            get {
                return this.key_query_valueField;
            }
            set {
                this.key_query_valueField = value;
            }
        }
        
        public EntityStateAuditType key_set_value {
            get {
                return this.key_set_valueField;
            }
            set {
                this.key_set_valueField = value;
            }
        }
        
        public EntityStateAuditType key_create_sub_key {
            get {
                return this.key_create_sub_keyField;
            }
            set {
                this.key_create_sub_keyField = value;
            }
        }
        
        public EntityStateAuditType key_enumerate_sub_keys {
            get {
                return this.key_enumerate_sub_keysField;
            }
            set {
                this.key_enumerate_sub_keysField = value;
            }
        }
        
        public EntityStateAuditType key_notify {
            get {
                return this.key_notifyField;
            }
            set {
                this.key_notifyField = value;
            }
        }
        
        public EntityStateAuditType key_create_link {
            get {
                return this.key_create_linkField;
            }
            set {
                this.key_create_linkField = value;
            }
        }
        
        public EntityStateAuditType key_wow64_64key {
            get {
                return this.key_wow64_64keyField;
            }
            set {
                this.key_wow64_64keyField = value;
            }
        }
        
        public EntityStateAuditType key_wow64_32key {
            get {
                return this.key_wow64_32keyField;
            }
            set {
                this.key_wow64_32keyField = value;
            }
        }
        
        public EntityStateAuditType key_wow64_res {
            get {
                return this.key_wow64_resField;
            }
            set {
                this.key_wow64_resField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The registry key effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the DACL grants to the trustee or to any groups of which the trustee is a member. The regkeyeffectiverights53_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyeffectiverights53_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyeffectiverights53_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A regkeyeffectiverights53_object is defined as a combination of a Windows registry and trustee SID. The key entity represents the registry key to be evaluated while the trustee SID represents the account (SID) to check effective rights of. If multiple files or SIDs are matched by either reference, then each possible combination of registry key and SID is a matching registry key effective rights object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the RegkeyEffectiveRights53Behaviors complex type for more information about specific behaviors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyeffectiverights53_object : ObjectType {
        
        private object[] itemsField;
        
        private regkeyeffectiverights53_object_ItemsChoices[] _regkeyeffectiverights53ObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(RegkeyEffectiveRights53Behaviors))]
        [System.Xml.Serialization.XmlElementAttribute("hive", typeof(EntityObjectRegistryHiveType))]
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Regkeyeffectiverights53ObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public regkeyeffectiverights53_object_ItemsChoices[] Regkeyeffectiverights53ObjectItemsElementName {
            get {
                return this._regkeyeffectiverights53ObjectItemsElementNameField;
            }
            set {
                this._regkeyeffectiverights53ObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum regkeyeffectiverights53_object_ItemsChoices {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        hive,
        
        /// <remarks/>
        key,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The regkeyeffectiverights53_state element defines the different rights that can be associated with a given regkeyeffectiverights53_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyeffectiverights53_state : StateType {
        
        private EntityStateRegistryHiveType hiveField;
        
        private EntityStateStringType keyField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType standard_synchronizeField;
        
        private EntityStateBoolType access_system_securityField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType generic_allField;
        
        private EntityStateBoolType key_query_valueField;
        
        private EntityStateBoolType key_set_valueField;
        
        private EntityStateBoolType key_create_sub_keyField;
        
        private EntityStateBoolType key_enumerate_sub_keysField;
        
        private EntityStateBoolType key_notifyField;
        
        private EntityStateBoolType key_create_linkField;
        
        private EntityStateBoolType key_wow64_64keyField;
        
        private EntityStateBoolType key_wow64_32keyField;
        
        private EntityStateBoolType key_wow64_resField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// This element specifies the hive of a registry key on the machine from which to retrieve the SACL.
        /// </summary>
        public EntityStateRegistryHiveType hive {
            get {
                return this.hiveField;
            }
            set {
                this.hiveField = value;
            }
        }
        
        /// <summary>
        /// This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateBoolType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateBoolType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateBoolType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        public EntityStateBoolType key_query_value {
            get {
                return this.key_query_valueField;
            }
            set {
                this.key_query_valueField = value;
            }
        }
        
        public EntityStateBoolType key_set_value {
            get {
                return this.key_set_valueField;
            }
            set {
                this.key_set_valueField = value;
            }
        }
        
        public EntityStateBoolType key_create_sub_key {
            get {
                return this.key_create_sub_keyField;
            }
            set {
                this.key_create_sub_keyField = value;
            }
        }
        
        public EntityStateBoolType key_enumerate_sub_keys {
            get {
                return this.key_enumerate_sub_keysField;
            }
            set {
                this.key_enumerate_sub_keysField = value;
            }
        }
        
        public EntityStateBoolType key_notify {
            get {
                return this.key_notifyField;
            }
            set {
                this.key_notifyField = value;
            }
        }
        
        public EntityStateBoolType key_create_link {
            get {
                return this.key_create_linkField;
            }
            set {
                this.key_create_linkField = value;
            }
        }
        
        public EntityStateBoolType key_wow64_64key {
            get {
                return this.key_wow64_64keyField;
            }
            set {
                this.key_wow64_64keyField = value;
            }
        }
        
        public EntityStateBoolType key_wow64_32key {
            get {
                return this.key_wow64_32keyField;
            }
            set {
                this.key_wow64_32keyField = value;
            }
        }
        
        public EntityStateBoolType key_wow64_res {
            get {
                return this.key_wow64_resField;
            }
            set {
                this.key_wow64_resField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The registry key effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the DACL grants to the trustee or to any groups of which the trustee is a member. The regkeyeffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyeffectiverights_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyeffectiverights_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyeffectiverights_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType17[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(RegkeyEffectiveRightsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("hive", typeof(EntityObjectRegistryHiveType))]
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType17[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType17 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        hive,
        
        /// <remarks/>
        key,
        
        /// <remarks/>
        trustee_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The regkeyeffectiverights_state element defines the different rights that can be associated with a given regkeyeffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class regkeyeffectiverights_state : StateType {
        
        private EntityStateRegistryHiveType hiveField;
        
        private EntityStateStringType keyField;
        
        private EntityStateStringType trustee_nameField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType standard_synchronizeField;
        
        private EntityStateBoolType access_system_securityField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType generic_allField;
        
        private EntityStateBoolType key_query_valueField;
        
        private EntityStateBoolType key_set_valueField;
        
        private EntityStateBoolType key_create_sub_keyField;
        
        private EntityStateBoolType key_enumerate_sub_keysField;
        
        private EntityStateBoolType key_notifyField;
        
        private EntityStateBoolType key_create_linkField;
        
        private EntityStateBoolType key_wow64_64keyField;
        
        private EntityStateBoolType key_wow64_32keyField;
        
        private EntityStateBoolType key_wow64_resField;
        
        private EntityStateWindowsViewType windows_viewField;
        
        /// <summary>
        /// This element specifies the hive of a registry key on the machine from which to retrieve the SACL.
        /// </summary>
        public EntityStateRegistryHiveType hive {
            get {
                return this.hiveField;
            }
            set {
                this.hiveField = value;
            }
        }
        
        /// <summary>
        /// This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <summary>
        /// The unique name associated with a particular security identifier (SID). In Windows, trustee names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, trustee names should be identified in the form: "domain\trustee name". For local trustee names use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType trustee_name {
            get {
                return this.trustee_nameField;
            }
            set {
                this.trustee_nameField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateBoolType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateBoolType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateBoolType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
        
        public EntityStateBoolType key_query_value {
            get {
                return this.key_query_valueField;
            }
            set {
                this.key_query_valueField = value;
            }
        }
        
        public EntityStateBoolType key_set_value {
            get {
                return this.key_set_valueField;
            }
            set {
                this.key_set_valueField = value;
            }
        }
        
        public EntityStateBoolType key_create_sub_key {
            get {
                return this.key_create_sub_keyField;
            }
            set {
                this.key_create_sub_keyField = value;
            }
        }
        
        public EntityStateBoolType key_enumerate_sub_keys {
            get {
                return this.key_enumerate_sub_keysField;
            }
            set {
                this.key_enumerate_sub_keysField = value;
            }
        }
        
        public EntityStateBoolType key_notify {
            get {
                return this.key_notifyField;
            }
            set {
                this.key_notifyField = value;
            }
        }
        
        public EntityStateBoolType key_create_link {
            get {
                return this.key_create_linkField;
            }
            set {
                this.key_create_linkField = value;
            }
        }
        
        public EntityStateBoolType key_wow64_64key {
            get {
                return this.key_wow64_64keyField;
            }
            set {
                this.key_wow64_64keyField = value;
            }
        }
        
        public EntityStateBoolType key_wow64_32key {
            get {
                return this.key_wow64_32keyField;
            }
            set {
                this.key_wow64_32keyField = value;
            }
        }
        
        public EntityStateBoolType key_wow64_res {
            get {
                return this.key_wow64_resField;
            }
            set {
                this.key_wow64_resField = value;
            }
        }
        
        /// <summary>
        /// The windows view value to which this was targeted. This is used to indicate which view (32-bit or 64-bit), the associated State applies to.
        /// </summary>
        public EntityStateWindowsViewType windows_view {
            get {
                return this.windows_viewField;
            }
            set {
                this.windows_viewField = value;
            }
        }
    }
    
    /// <summary>
    /// The service_test is used to check metadata associated with Windows services. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a service_object and the optional state elements specify the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class service_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The service_object element is used by a service_test to define the specific service(s) to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class service_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("service_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The service_state element defines the different metadata associated with a Windows service. This includes the service name, display name, description, type, start type, current state, controls accepted, start name, path, pid, service flag, and dependencies. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class service_state : StateType {
        
        private EntityStateStringType service_nameField;
        
        private EntityStateStringType display_nameField;
        
        private EntityStateStringType descriptionField;
        
        private EntityStateServiceTypeType service_typeField;
        
        private EntityStateServiceStartTypeType start_typeField;
        
        private EntityStateServiceCurrentStateType current_stateField;
        
        private EntityStateServiceControlsAcceptedType controls_acceptedField;
        
        private EntityStateStringType start_nameField;
        
        private EntityStateStringType pathField;
        
        private EntityStateIntType pidField;
        
        private EntityStateBoolType service_flagField;
        
        private EntityStateStringType dependenciesField;
        
        /// <summary>
        /// The service_name element specifies the name of the service as specified in the Service Control Manager (SCM) database.
        /// </summary>
        public EntityStateStringType service_name {
            get {
                return this.service_nameField;
            }
            set {
                this.service_nameField = value;
            }
        }
        
        /// <summary>
        /// The display_name element specifies the name of the service as specified in tools such as Control Panel->Administrative Tools->Services.
        /// </summary>
        public EntityStateStringType display_name {
            get {
                return this.display_nameField;
            }
            set {
                this.display_nameField = value;
            }
        }
        
        /// <summary>
        /// The description element specifies the description of the service.
        /// </summary>
        public EntityStateStringType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <summary>
        /// The service_type element specifies the type of the service.
        /// </summary>
        public EntityStateServiceTypeType service_type {
            get {
                return this.service_typeField;
            }
            set {
                this.service_typeField = value;
            }
        }
        
        /// <summary>
        /// The start_type element specifies when the service should be started.
        /// </summary>
        public EntityStateServiceStartTypeType start_type {
            get {
                return this.start_typeField;
            }
            set {
                this.start_typeField = value;
            }
        }
        
        /// <summary>
        /// The current_state element specifies the current state of the service.
        /// </summary>
        public EntityStateServiceCurrentStateType current_state {
            get {
                return this.current_stateField;
            }
            set {
                this.current_stateField = value;
            }
        }
        
        /// <summary>
        /// The controls_accepted element specifies the control codes that a service will accept and process.
        /// </summary>
        public EntityStateServiceControlsAcceptedType controls_accepted {
            get {
                return this.controls_acceptedField;
            }
            set {
                this.controls_acceptedField = value;
            }
        }
        
        /// <summary>
        /// The start_name element specifies the account under which the process should run.
        /// </summary>
        public EntityStateStringType start_name {
            get {
                return this.start_nameField;
            }
            set {
                this.start_nameField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the path to the binary of the service.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The pid element specifies the process ID of the service.
        /// </summary>
        public EntityStateIntType pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
            }
        }
        
        /// <summary>
        /// The service_flag element specifies if the service is in a system process that must always run (1) or if the service is in a non-system process or is not running (0). If the service is not running, the pid will be 0. Otherwise, the pid will be non-zero.
        /// </summary>
        public EntityStateBoolType service_flag {
            get {
                return this.service_flagField;
            }
            set {
                this.service_flagField = value;
            }
        }
        
        /// <summary>
        /// The dependencies element specifies the dependencies of this service on other services.
        /// </summary>
        public EntityStateStringType dependencies {
            get {
                return this.dependenciesField;
            }
            set {
                this.dependenciesField = value;
            }
        }
    }
    
    /// <summary>
    /// The service effective rights test is used to check the effective rights associated with Windows services. Note that the trustee's effective access rights are the access rights that the DACL grants to the trustee or to any groups of which the trustee is a member. The serviceeffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a serviceeffectiverights_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class serviceeffectiverights_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A serviceeffectiverights_object is defined as a combination of a Windows service_name and trustee_sid. The service_name entity represents the service to be evaluated while the trustee_sid entity represents the account (SID) to check the effective rights of.  If multiple services or SIDs are matched by either reference, then each possible combination of service and SID is a matching service effective rights object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class serviceeffectiverights_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType18[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("service_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType18[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType18 {
        
        /// <remarks/>
        service_name,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// See http://support.microsoft.com/kb/914392 for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class serviceeffectiverights_state : StateType {
        
        private EntityStateStringType service_nameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType service_query_confField;
        
        private EntityStateBoolType service_change_confField;
        
        private EntityStateBoolType service_query_statField;
        
        private EntityStateBoolType service_enum_dependentsField;
        
        private EntityStateBoolType service_startField;
        
        private EntityStateBoolType service_stopField;
        
        private EntityStateBoolType service_pauseField;
        
        private EntityStateBoolType service_interrogateField;
        
        private EntityStateBoolType service_user_definedField;
        
        /// <summary>
        /// The service_name element specifies a service on the machine from which to retrieve the DACL. Note that the service_name element should contain the actual name of the service and not its display name that is found in Control Panel->Administrative Tools->Services.  For example, if you wanted to check the effective rights of the Automatic Updates service you would specify 'wuauserv' for the service_name element not 'Automatic Updates'.
        /// </summary>
        public EntityStateStringType service_name {
            get {
                return this.service_nameField;
            }
            set {
                this.service_nameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that is associated with a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the DeleteService function to delete the service.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the QueryServiceObjectSecurity function to query the Security Descriptor of the service object.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the SetServiceObjectSecurity function to modify the DACL member of the service object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the SetServiceObjectSecurity function to modify the Owner and Group members of the service object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// Read access (STANDARD_RIGHTS_READ, SERVICE_QUERY_CONFIG, SERVICE_QUERY_STATUS, SERVICE_INTERROGATE, SERVICE_ENUMERATE_DEPENDENTS).
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access (STANDARD_RIGHTS_WRITE, SERVICE_CHANGE_CONFIG).
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access (STANDARD_RIGHTS_EXECUTE, SERVICE_START, SERVICE_STOP, SERVICE_PAUSE_CONTINUE, SERVICE_USER_DEFINED_CONTROL).
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the QueryServiceConfig and QueryServiceConfig2 functions to query the service configuration.
        /// </summary>
        public EntityStateBoolType service_query_conf {
            get {
                return this.service_query_confField;
            }
            set {
                this.service_query_confField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the ChangeServiceConfig or ChangeServiceConfig2 function to change the service configuration.
        /// </summary>
        public EntityStateBoolType service_change_conf {
            get {
                return this.service_change_confField;
            }
            set {
                this.service_change_confField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the QueryServiceStatusEx function to ask the service control manager about the status of the service.
        /// </summary>
        public EntityStateBoolType service_query_stat {
            get {
                return this.service_query_statField;
            }
            set {
                this.service_query_statField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the EnumDependentServices function to enumerate all the services dependent on the service.
        /// </summary>
        public EntityStateBoolType service_enum_dependents {
            get {
                return this.service_enum_dependentsField;
            }
            set {
                this.service_enum_dependentsField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the StartService function to start the service.
        /// </summary>
        public EntityStateBoolType service_start {
            get {
                return this.service_startField;
            }
            set {
                this.service_startField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the ControlService function to stop the service.
        /// </summary>
        public EntityStateBoolType service_stop {
            get {
                return this.service_stopField;
            }
            set {
                this.service_stopField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the ControlService function to pause or continue the service.
        /// </summary>
        public EntityStateBoolType service_pause {
            get {
                return this.service_pauseField;
            }
            set {
                this.service_pauseField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the ControlService function to ask the service to report its status immediately.
        /// </summary>
        public EntityStateBoolType service_interrogate {
            get {
                return this.service_interrogateField;
            }
            set {
                this.service_interrogateField = value;
            }
        }
        
        /// <summary>
        /// This permission is required to call the ControlService function to specify a user-defined control code.
        /// </summary>
        public EntityStateBoolType service_user_defined {
            get {
                return this.service_user_definedField;
            }
            set {
                this.service_user_definedField = value;
            }
        }
    }
    
    /// <summary>
    /// The shared resource test is used to check properties associated with any shared resource on the system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sharedresource_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresource_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// An shared resource object consists of a single netname entity that identifies a specific shared resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresource_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("netname", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The sharedresource_state element defines the different metadata associated with a Windows shared resource. This includes the share type, permissions, and max uses. This state mirrors the SHARE_INFO_2 structure. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresource_state : StateType {
        
        private EntityStateStringType netnameField;
        
        private EntityStateSharedResourceTypeType shared_typeField;
        
        private EntityStateIntType max_usesField;
        
        private EntityStateIntType current_usesField;
        
        private EntityStateStringType local_pathField;
        
        private EntityStateBoolType access_read_permissionField;
        
        private EntityStateBoolType access_write_permissionField;
        
        private EntityStateBoolType access_create_permissionField;
        
        private EntityStateBoolType access_exec_permissionField;
        
        private EntityStateBoolType access_delete_permissionField;
        
        private EntityStateBoolType access_atrib_permissionField;
        
        private EntityStateBoolType access_perm_permissionField;
        
        private EntityStateBoolType access_all_permissionField;
        
        /// <summary>
        /// This element specifies the name associated with a particular shared resource.
        /// </summary>
        public EntityStateStringType netname {
            get {
                return this.netnameField;
            }
            set {
                this.netnameField = value;
            }
        }
        
        /// <summary>
        /// The type of the shared resource.
        /// </summary>
        public EntityStateSharedResourceTypeType shared_type {
            get {
                return this.shared_typeField;
            }
            set {
                this.shared_typeField = value;
            }
        }
        
        /// <summary>
        /// The maximum number of concurrent connections that the shared resource can accommodate.
        /// </summary>
        public EntityStateIntType max_uses {
            get {
                return this.max_usesField;
            }
            set {
                this.max_usesField = value;
            }
        }
        
        /// <summary>
        /// The number of current connections to the resource.
        /// </summary>
        public EntityStateIntType current_uses {
            get {
                return this.current_usesField;
            }
            set {
                this.current_usesField = value;
            }
        }
        
        /// <summary>
        /// The local path for the shared resource.
        /// </summary>
        public EntityStateStringType local_path {
            get {
                return this.local_pathField;
            }
            set {
                this.local_pathField = value;
            }
        }
        
        /// <summary>
        /// Permission to read data from a resource and, by default, to execute the resource.
        /// </summary>
        public EntityStateBoolType access_read_permission {
            get {
                return this.access_read_permissionField;
            }
            set {
                this.access_read_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to write data to the resource.
        /// </summary>
        public EntityStateBoolType access_write_permission {
            get {
                return this.access_write_permissionField;
            }
            set {
                this.access_write_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to create an instance of the resource (such as a file); data can be written to the resource as the resource is created.
        /// </summary>
        public EntityStateBoolType access_create_permission {
            get {
                return this.access_create_permissionField;
            }
            set {
                this.access_create_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to execute the resource.
        /// </summary>
        public EntityStateBoolType access_exec_permission {
            get {
                return this.access_exec_permissionField;
            }
            set {
                this.access_exec_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to delete the resource.
        /// </summary>
        public EntityStateBoolType access_delete_permission {
            get {
                return this.access_delete_permissionField;
            }
            set {
                this.access_delete_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to modify the resource's attributes (such as the date and time when a file was last modified).
        /// </summary>
        public EntityStateBoolType access_atrib_permission {
            get {
                return this.access_atrib_permissionField;
            }
            set {
                this.access_atrib_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to modify the permissions (read, write, create, execute, and delete) assigned to a resource for a user or application.
        /// </summary>
        public EntityStateBoolType access_perm_permission {
            get {
                return this.access_perm_permissionField;
            }
            set {
                this.access_perm_permissionField = value;
            }
        }
        
        /// <summary>
        /// Permission to read, write, create, execute, and delete resources, and to modify their attributes and permissions.
        /// </summary>
        public EntityStateBoolType access_all_permission {
            get {
                return this.access_all_permissionField;
            }
            set {
                this.access_all_permissionField = value;
            }
        }
    }
    
    /// <summary>
    /// The shared resource audited permissions test is used to check the audit permissions associated with any shared resource on the system. Note that the trustee's audited permissions are the audit permissons that the SACL grants to the trustee or to any groups of which the trustee is a member. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sharedresourceauditedpermissions_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresourceauditedpermissions_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A shared resource audited permissions object consists of a netname entity that identifies a specific shared resource and a trustee_sid entity that identifies a specific account (SID) to check the audited permissions of.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresourceauditedpermissions_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType19[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(SharedResourceAuditedPermissionsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("netname", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType19[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class SharedResourceAuditedPermissionsBehaviors {
        
        private bool include_groupField;
        
        public SharedResourceAuditedPermissionsBehaviors() {
            this.include_groupField = true;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType19 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        netname,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The sharedresourceauditedpermissions_state element defines the different audited permissions that can be associated with a given sharedresourceauditedpermissions_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresourceauditedpermissions_state : StateType {
        
        private EntityStateStringType netnameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateAuditType standard_deleteField;
        
        private EntityStateAuditType standard_read_controlField;
        
        private EntityStateAuditType standard_write_dacField;
        
        private EntityStateAuditType standard_write_ownerField;
        
        private EntityStateAuditType standard_synchronizeField;
        
        private EntityStateAuditType access_system_securityField;
        
        private EntityStateAuditType generic_readField;
        
        private EntityStateAuditType generic_writeField;
        
        private EntityStateAuditType generic_executeField;
        
        private EntityStateAuditType generic_allField;
        
        /// <summary>
        /// This element specifies the name associated with a particular shared resource.
        /// </summary>
        public EntityStateStringType netname {
            get {
                return this.netnameField;
            }
            set {
                this.netnameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateAuditType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateAuditType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateAuditType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateAuditType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateAuditType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateAuditType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateAuditType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateAuditType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateAuditType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
    }
    
    /// <summary>
    /// The shared resource effective rights test is used to check the effective rights associated with any shared resource on the system. Note that the trustee's effective access rights are the access rights that the DACL grants to the trustee or to any groups of which the trustee is a member. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sharedresourceeffectiverights_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresourceeffectiverights_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A shared resource effective rights object consists of a netname entity that identifies a specific shared resource and a trustee_sid entity that identifies a specific account (SID) to check the effective rights of.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresourceeffectiverights_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType20[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(SharedResourceEffectiveRightsBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("netname", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType20[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class SharedResourceEffectiveRightsBehaviors {
        
        private bool include_groupField;
        
        public SharedResourceEffectiveRightsBehaviors() {
            this.include_groupField = true;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType20 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        netname,
        
        /// <remarks/>
        trustee_sid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The sharedresourceeffectiverights_state element defines the different rights that can be associated with a given sharedresourceeffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sharedresourceeffectiverights_state : StateType {
        
        private EntityStateStringType netnameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateBoolType standard_deleteField;
        
        private EntityStateBoolType standard_read_controlField;
        
        private EntityStateBoolType standard_write_dacField;
        
        private EntityStateBoolType standard_write_ownerField;
        
        private EntityStateBoolType standard_synchronizeField;
        
        private EntityStateBoolType access_system_securityField;
        
        private EntityStateBoolType generic_readField;
        
        private EntityStateBoolType generic_writeField;
        
        private EntityStateBoolType generic_executeField;
        
        private EntityStateBoolType generic_allField;
        
        /// <summary>
        /// This element specifies the name associated with a particular shared resource.
        /// </summary>
        public EntityStateStringType netname {
            get {
                return this.netnameField;
            }
            set {
                this.netnameField = value;
            }
        }
        
        /// <summary>
        /// The trustee_sid element is the unique SID that associated a user, group, system, or program (such as a Windows service).
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The right to delete the object.
        /// </summary>
        public EntityStateBoolType standard_delete {
            get {
                return this.standard_deleteField;
            }
            set {
                this.standard_deleteField = value;
            }
        }
        
        /// <summary>
        /// The right to read the information in the object's Security Descriptor, not including the information in the SACL.
        /// </summary>
        public EntityStateBoolType standard_read_control {
            get {
                return this.standard_read_controlField;
            }
            set {
                this.standard_read_controlField = value;
            }
        }
        
        /// <summary>
        /// The right to modify the DACL in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_dac {
            get {
                return this.standard_write_dacField;
            }
            set {
                this.standard_write_dacField = value;
            }
        }
        
        /// <summary>
        /// The right to change the owner in the object's Security Descriptor.
        /// </summary>
        public EntityStateBoolType standard_write_owner {
            get {
                return this.standard_write_ownerField;
            }
            set {
                this.standard_write_ownerField = value;
            }
        }
        
        /// <summary>
        /// The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.
        /// </summary>
        public EntityStateBoolType standard_synchronize {
            get {
                return this.standard_synchronizeField;
            }
            set {
                this.standard_synchronizeField = value;
            }
        }
        
        /// <summary>
        /// Indicates access to a system access control list (SACL).
        /// </summary>
        public EntityStateBoolType access_system_security {
            get {
                return this.access_system_securityField;
            }
            set {
                this.access_system_securityField = value;
            }
        }
        
        /// <summary>
        /// Read access.
        /// </summary>
        public EntityStateBoolType generic_read {
            get {
                return this.generic_readField;
            }
            set {
                this.generic_readField = value;
            }
        }
        
        /// <summary>
        /// Write access.
        /// </summary>
        public EntityStateBoolType generic_write {
            get {
                return this.generic_writeField;
            }
            set {
                this.generic_writeField = value;
            }
        }
        
        /// <summary>
        /// Execute access.
        /// </summary>
        public EntityStateBoolType generic_execute {
            get {
                return this.generic_executeField;
            }
            set {
                this.generic_executeField = value;
            }
        }
        
        /// <summary>
        /// Read, write, and execute access.
        /// </summary>
        public EntityStateBoolType generic_all {
            get {
                return this.generic_allField;
            }
            set {
                this.generic_allField = value;
            }
        }
    }
    
    /// <summary>
    /// The SID test is used to check properties associated with the specified SID. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sid_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sid_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The sid_object element is used by a sid_test to define the object set, in this case a set of SIDs (identified by name), to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sid_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(SidBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class SidBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public SidBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    /// <summary>
    /// The sid_state element defines the different metadata associate with a Windows trustee (identified by name).  Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sid_state : StateType {
        
        private EntityStateStringType trustee_nameField;
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateStringType trustee_domainField;
        
        /// <summary>
        /// This element specifies the trustee name associated with a particular SID. In Windows, trustee names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, trustee names should be identified in the form: "domain\trustee name". For local trustee names use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType trustee_name {
            get {
                return this.trustee_nameField;
            }
            set {
                this.trustee_nameField = value;
            }
        }
        
        /// <summary>
        /// The security identifier (SID) of the specified trustee name.
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// The domain of the specified trustee name.
        /// </summary>
        public EntityStateStringType trustee_domain {
            get {
                return this.trustee_domainField;
            }
            set {
                this.trustee_domainField = value;
            }
        }
    }
    
    /// <summary>
    /// Note that this sid_sid test was added in version 5.4 as a temporary fix.  There is a need within the community to identify things like users and groups by both the name and the SID.  For version 6 of OVAL, work is underway for a better solution to the problem, but for now, a second test was added to satisfy the need.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sid_sid_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The sid_sid_object element is used by a sid_sid_test to define the object set, in this case a set of SIDs, to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sid_sid_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(SidSidBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("trustee_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class SidSidBehaviors {
        
        private bool include_groupField;
        
        private bool resolve_groupField;
        
        public SidSidBehaviors() {
            this.include_groupField = true;
            this.resolve_groupField = false;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_group {
            get {
                return this.include_groupField;
            }
            set {
                this.include_groupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool resolve_group {
            get {
                return this.resolve_groupField;
            }
            set {
                this.resolve_groupField = value;
            }
        }
    }
    
    /// <summary>
    /// The sid_state element defines the different metadata associate with a Windows trustee (identified by SID).  Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class sid_sid_state : StateType {
        
        private EntityStateStringType trustee_sidField;
        
        private EntityStateStringType trustee_nameField;
        
        private EntityStateStringType trustee_domainField;
        
        /// <summary>
        /// The security identifier (SID) of the specified trustee name.
        /// </summary>
        public EntityStateStringType trustee_sid {
            get {
                return this.trustee_sidField;
            }
            set {
                this.trustee_sidField = value;
            }
        }
        
        /// <summary>
        /// This element specifies the trustee name associated with a particular SID. In Windows, trustee names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, trustee names should be identified in the form: "domain\trustee name". For local trustee names use: "computer name\trustee name". For built-in accounts on the system, use the trustee name without a domain.
        /// </summary>
        public EntityStateStringType trustee_name {
            get {
                return this.trustee_nameField;
            }
            set {
                this.trustee_nameField = value;
            }
        }
        
        /// <summary>
        /// The domain of the specified trustee name.
        /// </summary>
        public EntityStateStringType trustee_domain {
            get {
                return this.trustee_domainField;
            }
            set {
                this.trustee_domainField = value;
            }
        }
    }
    
    /// <summary>
    /// The user access control test is used to check setting related to User Access Control within Windows. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a uaac_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class uac_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The uac_object element is used by a user access control test to define those objects to evaluate based on a specified state. There is actually only one object relating to user access control and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check user access control settings will reference the same uac_object which is basically an empty object element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class uac_object : ObjectType {
    }
    
    /// <summary>
    /// The uac_state element specifies the different settings that are available under User Access Control. A user access control test will reference a specific instance of this state that defines the exact settings that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class uac_state : StateType {
        
        private EntityStateBoolType admin_approval_modeField;
        
        private EntityStateStringType elevation_prompt_adminField;
        
        private EntityStateStringType elevation_prompt_standardField;
        
        private EntityStateBoolType detect_installationsField;
        
        private EntityStateBoolType elevate_signed_executablesField;
        
        private EntityStateBoolType elevate_uiaccessField;
        
        private EntityStateBoolType run_admins_aamField;
        
        private EntityStateBoolType secure_desktopField;
        
        private EntityStateBoolType virtualize_write_failuresField;
        
        /// <summary>
        /// Admin Approval Mode for the Built-in Administrator account.
        /// </summary>
        public EntityStateBoolType admin_approval_mode {
            get {
                return this.admin_approval_modeField;
            }
            set {
                this.admin_approval_modeField = value;
            }
        }
        
        /// <summary>
        /// Behavior of the elevation prompt for administrators in Admin Approval Mode.
        /// </summary>
        public EntityStateStringType elevation_prompt_admin {
            get {
                return this.elevation_prompt_adminField;
            }
            set {
                this.elevation_prompt_adminField = value;
            }
        }
        
        /// <summary>
        /// Behavior of the elevation prompt for standard users.
        /// </summary>
        public EntityStateStringType elevation_prompt_standard {
            get {
                return this.elevation_prompt_standardField;
            }
            set {
                this.elevation_prompt_standardField = value;
            }
        }
        
        /// <summary>
        /// Detect application installations and prompt for elevation.
        /// </summary>
        public EntityStateBoolType detect_installations {
            get {
                return this.detect_installationsField;
            }
            set {
                this.detect_installationsField = value;
            }
        }
        
        /// <summary>
        /// Only elevate executables that are signed and validated.
        /// </summary>
        public EntityStateBoolType elevate_signed_executables {
            get {
                return this.elevate_signed_executablesField;
            }
            set {
                this.elevate_signed_executablesField = value;
            }
        }
        
        /// <summary>
        /// Only elevate UIAccess applications that are installed in secure locations.
        /// </summary>
        public EntityStateBoolType elevate_uiaccess {
            get {
                return this.elevate_uiaccessField;
            }
            set {
                this.elevate_uiaccessField = value;
            }
        }
        
        /// <summary>
        /// Run all administrators in Admin Approval Mode.
        /// </summary>
        public EntityStateBoolType run_admins_aam {
            get {
                return this.run_admins_aamField;
            }
            set {
                this.run_admins_aamField = value;
            }
        }
        
        /// <summary>
        /// Switch to the secure desktop when prompting for elevation.
        /// </summary>
        public EntityStateBoolType secure_desktop {
            get {
                return this.secure_desktopField;
            }
            set {
                this.secure_desktopField = value;
            }
        }
        
        /// <summary>
        /// Virtualize file and registry write failures to per-user locations.
        /// </summary>
        public EntityStateBoolType virtualize_write_failures {
            get {
                return this.virtualize_write_failuresField;
            }
            set {
                this.virtualize_write_failuresField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_test is used to check information about Windows users. When the user_test collects the users on the system, it should only include the local and built-in user accounts and not domain user accounts.  However, it is important to note that domain user accounts can still be looked up. Also, note that the collection of groups, for which a user is a member, is not recursive. The only groups that will be collected are those for which the user is a direct member. For example, if a user is a member of group A, and group A is a member of group B, the only group that will be collected is group A. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a user_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("user", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_state element enumerates the different groups (identified by name) that a Windows user might belong to. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_state : StateType {
        
        private EntityStateStringType userField;
        
        private EntityStateBoolType enabledField;
        
        private EntityStateStringType groupField;
        
        private EntityStateIntType last_logonField;
        
        /// <summary>
        /// The user entity holds a string that represents the name of a particular user. In Windows, user names are case-insensitive. As a result, it is recommended that the case-insensitive operations are used for this entity. In a domain environment, users should be identified in the form: "domain\user name". For local users use: "computer name\user name". For built-in accounts on the system, use the user name without a domain.
        /// </summary>
        public EntityStateStringType user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <summary>
        /// This element holds a boolean value that specifies whether the particular user account is enabled or not.
        /// </summary>
        public EntityStateBoolType enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <summary>
        /// The group element can be included multiple times in a system characteristic item in order to record that a user can be a member of a number of different groups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like group that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <summary>
        /// The date and time when the last logon occurred. This value is stored as the number of seconds that have elapsed since 00:00:00, January 1, 1970, GMT.
        /// </summary>
        public EntityStateIntType last_logon {
            get {
                return this.last_logonField;
            }
            set {
                this.last_logonField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_sid55_test is used to check information about Windows users. When the user_sid55_test collects the user SIDs on the system, it should only include the local and built-in user SIDs and not domain user SIDs.  However, it is important to note that domain user SIDs can still be looked up. Also, note that the collection of groups, for which a user is a member, is not recursive. The only groups that will be collected are those for which the user is a direct member. For example, if a user is a member of group A, and group A is a member of group B, the only group that will be collected is group A. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a user_sid55_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_sid55_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_sid55_object represents a set of users on a Windows system.  This set (which might contain only one user) is identified by a SID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_sid55_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("user_sid", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_sid55_state element enumerates the different groups (identified by SID) that a Windows user might belong to. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_sid55_state : StateType {
        
        private EntityStateStringType user_sidField;
        
        private EntityStateBoolType enabledField;
        
        private EntityStateStringType group_sidField;
        
        /// <summary>
        /// The user_sid entity holds a string that represents the SID of a particular user.
        /// </summary>
        public EntityStateStringType user_sid {
            get {
                return this.user_sidField;
            }
            set {
                this.user_sidField = value;
            }
        }
        
        /// <summary>
        /// This element holds a boolean value that specifies whether the particular user account is enabled or not.
        /// </summary>
        public EntityStateBoolType enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <summary>
        /// A string the represents the SID of a particular group.  The group_sid element can be included multiple times in a system characteristic item in order to record that a user can be a member of a number of different groups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like group that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType group_sid {
            get {
                return this.group_sidField;
            }
            set {
                this.group_sidField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_sid_test is used to check information about Windows users. When the user_sid_test collects the user SIDs on the system, it should only include the local and built-in user SIDs and not domain user SIDs.  However, it is important to note that domain user SIDs can still be looked up. Also, note that the collection of groups, for which a user is a member, is not recursive. The only groups that will be collected are those for which the user is a direct member. For example, if a user is a member of group A, and group A is a member of group B, the only group that will be collected is group A. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a user_sid_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_sid_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_sid_object represents a set of users on a Windows system.  This set (which might contain only one user) is identified by a SID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_sid_object : ObjectType {
        
        private object itemField;
        
        [System.Xml.Serialization.XmlElementAttribute("user", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <summary>
    /// The user_sid_state element enumerates the different groups (identified by SID) that a Windows user might belong to. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class user_sid_state : StateType {
        
        private EntityStateStringType userField;
        
        private EntityStateBoolType enabledField;
        
        private EntityStateStringType groupField;
        
        /// <summary>
        /// The user_sid entity holds a string that represents the SID of a particular user.
        /// </summary>
        public EntityStateStringType user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <summary>
        /// This element holds a boolean value that specifies whether the particular user account is enabled or not.
        /// </summary>
        public EntityStateBoolType enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <summary>
        /// A string the represents the SID of a particular group.  The group_sid element can be included multiple times in a system characteristic item in order to record that a user can be a member of a number of different groups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like group that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
    }
    
    /// <summary>
    /// The volume_test is used to check information about different storage volumes found on a Windows system. This includes the various system flags returned by GetVolumeInformation(). It is important to note that these system flags are specific to certain versions of Windows.  As a result, the documentation for that version of Windows should be consulted for more information. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a volume_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class volume_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A volume object defines the rootpath of the volume(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class volume_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("rootpath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The volume_state element defines the different metadata associate with a storage volume in Windows. This includes the rootpath, the file system type, name, and serial number, as well as any associated flags. Please refer to the individual elements in the schema for more details about what each represents. The GetVolumeInformation function as defined by Microsoft is also a good place to look for information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class volume_state : StateType {
        
        private EntityStateStringType rootpathField;
        
        private EntityStateStringType file_systemField;
        
        private EntityStateStringType nameField;
        
        private EntityStateDriveTypeType drive_typeField;
        
        private EntityStateIntType volume_max_component_lengthField;
        
        private EntityStateIntType serial_numberField;
        
        private EntityStateBoolType file_case_sensitive_searchField;
        
        private EntityStateBoolType file_case_preserved_namesField;
        
        private EntityStateBoolType file_unicode_on_diskField;
        
        private EntityStateBoolType file_persistent_aclsField;
        
        private EntityStateBoolType file_file_compressionField;
        
        private EntityStateBoolType file_volume_quotasField;
        
        private EntityStateBoolType file_supports_sparse_filesField;
        
        private EntityStateBoolType file_supports_reparse_pointsField;
        
        private EntityStateBoolType file_supports_remote_storageField;
        
        private EntityStateBoolType file_volume_is_compressedField;
        
        private EntityStateBoolType file_supports_object_idsField;
        
        private EntityStateBoolType file_supports_encryptionField;
        
        private EntityStateBoolType file_named_streamsField;
        
        private EntityStateBoolType file_read_only_volumeField;
        
        /// <summary>
        /// A string that contains the root directory of the volume to be described. A trailing backslash is required. For example, you would specify \\MyServer\MyShare as "\\MyServer\MyShare\", or the C drive as "C:\".
        /// </summary>
        public EntityStateStringType rootpath {
            get {
                return this.rootpathField;
            }
            set {
                this.rootpathField = value;
            }
        }
        
        /// <summary>
        /// The type of filesystem. For example FAT or NTFS.
        /// </summary>
        public EntityStateStringType file_system {
            get {
                return this.file_systemField;
            }
            set {
                this.file_systemField = value;
            }
        }
        
        /// <summary>
        /// The name of the volume.
        /// </summary>
        public EntityStateStringType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <summary>
        /// The drive type of the volume.
        /// </summary>
        public EntityStateDriveTypeType drive_type {
            get {
                return this.drive_typeField;
            }
            set {
                this.drive_typeField = value;
            }
        }
        
        /// <summary>
        /// The volume_max_component_length element specifies the maximum length, in TCHARs, of a file name component that a specified file system supports. A file name component is the portion of a file name between backslashes. The value that is stored in the variable that *lpMaximumComponentLength points to is used to indicate that a specified file system supports long names. For example, for a FAT file system that supports long names, the function stores the value 255, rather than the previous 8.3 indicator. Long names can also be supported on systems that use the NTFS file system.
        /// </summary>
        public EntityStateIntType volume_max_component_length {
            get {
                return this.volume_max_component_lengthField;
            }
            set {
                this.volume_max_component_lengthField = value;
            }
        }
        
        /// <summary>
        /// The volume serial number.
        /// </summary>
        public EntityStateIntType serial_number {
            get {
                return this.serial_numberField;
            }
            set {
                this.serial_numberField = value;
            }
        }
        
        /// <summary>
        /// The file system supports case-sensitive file names.
        /// </summary>
        public EntityStateBoolType file_case_sensitive_search {
            get {
                return this.file_case_sensitive_searchField;
            }
            set {
                this.file_case_sensitive_searchField = value;
            }
        }
        
        /// <summary>
        /// The file system preserves the case of file names when it places a name on disk.
        /// </summary>
        public EntityStateBoolType file_case_preserved_names {
            get {
                return this.file_case_preserved_namesField;
            }
            set {
                this.file_case_preserved_namesField = value;
            }
        }
        
        /// <summary>
        /// The file system supports Unicode in file names as they appear on disk.
        /// </summary>
        public EntityStateBoolType file_unicode_on_disk {
            get {
                return this.file_unicode_on_diskField;
            }
            set {
                this.file_unicode_on_diskField = value;
            }
        }
        
        /// <summary>
        /// The file system preserves and enforces ACLs. For example, NTFS preserves and enforces ACLs, and FAT does not.
        /// </summary>
        public EntityStateBoolType file_persistent_acls {
            get {
                return this.file_persistent_aclsField;
            }
            set {
                this.file_persistent_aclsField = value;
            }
        }
        
        /// <summary>
        /// The file system supports file-based compression.
        /// </summary>
        public EntityStateBoolType file_file_compression {
            get {
                return this.file_file_compressionField;
            }
            set {
                this.file_file_compressionField = value;
            }
        }
        
        /// <summary>
        /// The file system supports disk quotas.
        /// </summary>
        public EntityStateBoolType file_volume_quotas {
            get {
                return this.file_volume_quotasField;
            }
            set {
                this.file_volume_quotasField = value;
            }
        }
        
        /// <summary>
        /// The file system supports sparse files.
        /// </summary>
        public EntityStateBoolType file_supports_sparse_files {
            get {
                return this.file_supports_sparse_filesField;
            }
            set {
                this.file_supports_sparse_filesField = value;
            }
        }
        
        /// <summary>
        /// The file system supports reparse points.
        /// </summary>
        public EntityStateBoolType file_supports_reparse_points {
            get {
                return this.file_supports_reparse_pointsField;
            }
            set {
                this.file_supports_reparse_pointsField = value;
            }
        }
        
        /// <summary>
        /// The specified volume is a compressed volume; for example, a DoubleSpace volume.
        /// </summary>
        public EntityStateBoolType file_supports_remote_storage {
            get {
                return this.file_supports_remote_storageField;
            }
            set {
                this.file_supports_remote_storageField = value;
            }
        }
        
        /// <summary>
        /// The specified volume is a compressed volume; for example, a DoubleSpace volume.
        /// </summary>
        public EntityStateBoolType file_volume_is_compressed {
            get {
                return this.file_volume_is_compressedField;
            }
            set {
                this.file_volume_is_compressedField = value;
            }
        }
        
        /// <summary>
        /// The file system supports object identifiers.
        /// </summary>
        public EntityStateBoolType file_supports_object_ids {
            get {
                return this.file_supports_object_idsField;
            }
            set {
                this.file_supports_object_idsField = value;
            }
        }
        
        /// <summary>
        /// The file system supports the Encrypted File System (EFS).
        /// </summary>
        public EntityStateBoolType file_supports_encryption {
            get {
                return this.file_supports_encryptionField;
            }
            set {
                this.file_supports_encryptionField = value;
            }
        }
        
        /// <summary>
        /// The file system supports named streams.
        /// </summary>
        public EntityStateBoolType file_named_streams {
            get {
                return this.file_named_streamsField;
            }
            set {
                this.file_named_streamsField = value;
            }
        }
        
        /// <summary>
        /// The specified volume is read-only.
        /// </summary>
        public EntityStateBoolType file_read_only_volume {
            get {
                return this.file_read_only_volumeField;
            }
            set {
                this.file_read_only_volumeField = value;
            }
        }
    }
    
    /// <summary>
    /// The wmi test is used to check information accessed by WMI. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a wmi_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wmi_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wmi_object : ObjectType {
        
        private object[] itemsField;
        
        private wmi_object_ItemsChoices[] _wmiObjectItemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("namespace", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("wql", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("WmiObjectItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public wmi_object_ItemsChoices[] WmiObjectItemsElementName {
            get {
                return this._wmiObjectItemsElementNameField;
            }
            set {
                this._wmiObjectItemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum wmi_object_ItemsChoices {
        
        /// <remarks/>
        @namespace,
        
        /// <remarks/>
        wql,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wmi_state : StateType {
        
        private EntityStateStringType namespaceField;
        
        private EntityStateStringType wqlField;
        
        private EntityStateAnySimpleType resultField;
        
        /// <summary>
        /// Specifies which WMI namespace to look under. Each WMI provider normally registers its own WMI namespace and then all its classes within that namespace. For example, all Win32 WMI classes can be found in the namespace "root\cimv2", all IIS WMI classes can be found at "root\microsoftiisv2", and all LDAP WMI classes can be found at "root\directory\ldap".
        /// </summary>
        public EntityStateStringType @namespace {
            get {
                return this.namespaceField;
            }
            set {
                this.namespaceField = value;
            }
        }
        
        /// <summary>
        /// A WQL query used to identify the object(s) to test against. Any valid WQL query is usable with one exception, at most one field is allowed in the SELECT portion of the query. For example SELECT name FROM ... is valid, as is SELECT 'true' FROM ..., but SELECT name, number FROM ... is not valid. This is because the result element in the data section is only designed to work against a single field.
        /// </summary>
        public EntityStateStringType wql {
            get {
                return this.wqlField;
            }
            set {
                this.wqlField = value;
            }
        }
        
        /// <summary>
        /// The result element specifies how to test objects in the result set of the specified WQL statement. Only one comparable field is allowed. So if the WQL statement look like 'SELECT name FROM ...', then a result element with a value of 'Fred' would test that value against the names returned by the WQL statement.
        /// </summary>
        public EntityStateAnySimpleType result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <summary>
    /// The wmi57 test is used to check information accessed by WMI. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a wmi57_object and the optional state element specifies the metadata to check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wmi57_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wmi57_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType22[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("namespace", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("wql", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType22[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IncludeInSchema=false)]
    public enum ItemsChoiceType22 {
        
        /// <remarks/>
        @namespace,
        
        /// <remarks/>
        wql,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wmi57_state : StateType {
        
        private EntityStateStringType namespaceField;
        
        private EntityStateStringType wqlField;
        
        private EntityStateRecordType resultField;
        
        /// <summary>
        /// Specifies which WMI namespace to look under. Each WMI provider normally registers its own WMI namespace and then all its classes within that namespace. For example, all Win32 WMI classes can be found in the namespace "root\cimv2", all IIS WMI classes can be found at "root\microsoftiisv2", and all LDAP WMI classes can be found at "root\directory\ldap".
        /// </summary>
        public EntityStateStringType @namespace {
            get {
                return this.namespaceField;
            }
            set {
                this.namespaceField = value;
            }
        }
        
        /// <summary>
        /// A WQL query used to identify the object(s) to test against. Any valid WQL query is usable with one exception, all fields must be named in the SELECT portion of the query. For example SELECT name, age FROM ... is valid. However, SELECT * FROM ... is not valid. This is because the record element in the state and item require a unique field name value to ensure that any query results can be evaluated consistantly.
        /// </summary>
        public EntityStateStringType wql {
            get {
                return this.wqlField;
            }
            set {
                this.wqlField = value;
            }
        }
        
        /// <summary>
        /// The result element specifies how to test items in the result set of the specified WQL statement.
        /// </summary>
        public EntityStateRecordType result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <summary>
    /// Note that WUA can work off of many different sources including WSUS, update.microsoft.com, and a local cab file.  The content source is specific to a given system evaluating a wuaupdatesearcher_test and thus is not defined by this test.  The tool being used for evaluation should determine what content source is best for the system being assessed and then evaluate this test based on that selection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wuaupdatesearcher_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The wuaupdatesearcher_object element is used by a wuaupdatesearcher_test to define the specific search criteria to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wuaupdatesearcher_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(WuaUpdateSearcherBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("search_criteria", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=true)]
    public partial class WuaUpdateSearcherBehaviors {
        
        private bool include_superseded_updatesField;
        
        public WuaUpdateSearcherBehaviors() {
            this.include_superseded_updatesField = true;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool include_superseded_updates {
            get {
                return this.include_superseded_updatesField;
            }
            set {
                this.include_superseded_updatesField = value;
            }
        }
    }
    
    /// <summary>
    /// The wuaupdatesearcher_state element defines entities that can be tested related to a uaupdatesearcher_object.  This includes the search criteria and updated id.  Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows", IsNullable=false)]
    public partial class wuaupdatesearcher_state : StateType {
        
        private EntityStateStringType search_criteriaField;
        
        private EntityStateStringType update_idField;
        
        /// <summary>
        /// The search_criteria entity specifies a string to examine the search criteria that was used to generate the object set.  Note that since this entity is part of the state, it is not used to determine the object set, but rather is used to test the search criteria that was actually used.
        /// </summary>
        public EntityStateStringType search_criteria {
            get {
                return this.search_criteriaField;
            }
            set {
                this.search_criteriaField = value;
            }
        }
        
        /// <summary>
        /// The update_id enity specifies a string that represents a revision-independent identifier of an update.  This information is part of the IUpdateIdentity interface that is part of the result of the IUpdateSearcher interface's Search method.
        /// </summary>
        public EntityStateStringType update_id {
            get {
                return this.update_idField;
            }
            set {
                this.update_idField = value;
            }
        }
    }
}
