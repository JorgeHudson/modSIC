// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.5.0.14890
//    <NameSpace>Modulo.Collect.OVAL.Definitions.Unix</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings>Modulo.Collect.OVAL.Common;Modulo.Collect.OVAL.Definitions</CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Modulo.Collect.OVAL.Definitions.Unix {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Modulo.Collect.OVAL.Common;
    using Modulo.Collect.OVAL.Definitions;
    
    
    /// <summary>
    /// The dnscache_test is used to check the time to live and IP addresses associated with a domain name.  The time to live and IP addresses for a particular domain name are retrieved from the DNS cache on the local system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a dnscache_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class dnscache_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The dnscache_object is used by the dnscache_test to specify the domain name(s) that should be collected from the DNS cache on the local system. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class dnscache_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("domain_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateInterfaceType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateEncryptMethodType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateWaitStatusType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateXinetdTypeStatusType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateRoutingTableFlagsType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateGconfTypeType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateEndpointType : EntityStateStringType {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class EntityStateCapabilityType : EntityStateStringType {
    }
    
    /// <summary>
    /// The dnscache_state contains three entities that are used to check the domain name, time to live, and IP addresses associated with the DNS cache entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class dnscache_state : StateType {
        
        private EntityStateStringType domain_nameField;
        
        private EntityStateIntType ttlField;
        
        private EntityStateIPAddressStringType ip_addressField;
        
        /// <summary>
        /// The domain_name element contains a string that represents a domain name that was collected from the DNS cache on the local system.
        /// </summary>
        public EntityStateStringType domain_name {
            get {
                return this.domain_nameField;
            }
            set {
                this.domain_nameField = value;
            }
        }
        
        /// <summary>
        /// The ttl element contains an integer that represents the time to live in seconds of the DNS cache entry.
        /// </summary>
        public EntityStateIntType ttl {
            get {
                return this.ttlField;
            }
            set {
                this.ttlField = value;
            }
        }
        
        /// <summary>
        /// The ip_address element contains a string that represents an IP address associated with the specified domain name that was collected from the DNS cache on the local system. Note that the IP address can be IPv4 or IPv6.
        /// </summary>
        public EntityStateIPAddressStringType ip_address {
            get {
                return this.ip_addressField;
            }
            set {
                this.ip_addressField = value;
            }
        }
    }
    
    /// <summary>
    /// The file test is used to check metadata associated with UNIX files, of the sort returned by either an ls command, stat command or stat() system call. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a file_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class file_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class file_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType3[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType3[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=true)]
    public partial class FileBehaviors {
        
        private string max_depthField;
        
        private FileBehaviorsRecurse recurseField;
        
        private FileBehaviorsRecurse_direction recurse_directionField;
        
        private FileBehaviorsRecurse_file_system recurse_file_systemField;
        
        public FileBehaviors() {
            this.max_depthField = "-1";
            this.recurseField = FileBehaviorsRecurse.symlinksanddirectories;
            this.recurse_directionField = FileBehaviorsRecurse_direction.none;
            this.recurse_file_systemField = FileBehaviorsRecurse_file_system.all;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        [System.ComponentModel.DefaultValueAttribute("-1")]
        public string max_depth {
            get {
                return this.max_depthField;
            }
            set {
                this.max_depthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FileBehaviorsRecurse.symlinksanddirectories)]
        public FileBehaviorsRecurse recurse {
            get {
                return this.recurseField;
            }
            set {
                this.recurseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FileBehaviorsRecurse_direction.none)]
        public FileBehaviorsRecurse_direction recurse_direction {
            get {
                return this.recurse_directionField;
            }
            set {
                this.recurse_directionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FileBehaviorsRecurse_file_system.all)]
        public FileBehaviorsRecurse_file_system recurse_file_system {
            get {
                return this.recurse_file_systemField;
            }
            set {
                this.recurse_file_systemField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    public enum FileBehaviorsRecurse {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        files,
        
        /// <remarks/>
        directories,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("files and directories")]
        filesanddirectories,
        
        /// <remarks/>
        symlinks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("symlinks and directories")]
        symlinksanddirectories,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    public enum FileBehaviorsRecurse_direction {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    public enum FileBehaviorsRecurse_file_system {
        
        /// <remarks/>
        all,
        
        /// <remarks/>
        local,
        
        /// <remarks/>
        defined,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType3 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The file_state element defines the different metadata associate with a UNIX file. This includes the path, filename, type, group id, user id, size, etc. In addition, the permission associated with the file are also included. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class file_state : StateType {
        
        private EntityStateStringType filepathField;
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType typeField;
        
        private EntityStateIntType group_idField;
        
        private EntityStateIntType user_idField;
        
        private EntityStateIntType a_timeField;
        
        private EntityStateIntType c_timeField;
        
        private EntityStateIntType m_timeField;
        
        private EntityStateIntType sizeField;
        
        private EntityStateBoolType suidField;
        
        private EntityStateBoolType sgidField;
        
        private EntityStateBoolType stickyField;
        
        private EntityStateBoolType ureadField;
        
        private EntityStateBoolType uwriteField;
        
        private EntityStateBoolType uexecField;
        
        private EntityStateBoolType greadField;
        
        private EntityStateBoolType gwriteField;
        
        private EntityStateBoolType gexecField;
        
        private EntityStateBoolType oreadField;
        
        private EntityStateBoolType owriteField;
        
        private EntityStateBoolType oexecField;
        
        private EntityStateBoolType has_extended_aclField;
        
        /// <summary>
        /// The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.
        /// </summary>
        public EntityStateStringType filepath {
            get {
                return this.filepathField;
            }
            set {
                this.filepathField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The name of the file.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// This is the file's type: regular file (regular), directory, named pipe (fifo), symbolic link, socket or block special.
        /// </summary>
        public EntityStateStringType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <summary>
        /// The group_id entity represents the group owner of a file, by group number. To test for a file with no group assigned to it, this entity would be used with an empty value.
        /// </summary>
        public EntityStateIntType group_id {
            get {
                return this.group_idField;
            }
            set {
                this.group_idField = value;
            }
        }
        
        /// <summary>
        /// The numeric user id, or uid, is the third column of each user's entry in /etc/passwd. This element represents the owner of the file. To test for a file with no user assigned to it, this entity would be used with an empty value.
        /// </summary>
        public EntityStateIntType user_id {
            get {
                return this.user_idField;
            }
            set {
                this.user_idField = value;
            }
        }
        
        /// <summary>
        /// This is the time that the file was last accessed, in seconds since the Unix epoch. The Unix epoch is the time 00:00:00 UTC on January 1, 1970.
        /// </summary>
        public EntityStateIntType a_time {
            get {
                return this.a_timeField;
            }
            set {
                this.a_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the time of the last change to the file's inode, in seconds since the Unix epoch. The Unix epoch is the time 00:00:00 UTC on January 1, 1970. An inode is a Unix data structure that stores all of the information about a particular file.
        /// </summary>
        public EntityStateIntType c_time {
            get {
                return this.c_timeField;
            }
            set {
                this.c_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the time of the last change to the file's contents, in seconds since the Unix epoch. The Unix epoch is the time 00:00:00 UTC on January 1, 1970.
        /// </summary>
        public EntityStateIntType m_time {
            get {
                return this.m_timeField;
            }
            set {
                this.m_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the size of the file in bytes.
        /// </summary>
        public EntityStateIntType size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <summary>
        /// Does the program run with the uid (thus privileges) of the file's owner, rather than the calling user?
        /// </summary>
        public EntityStateBoolType suid {
            get {
                return this.suidField;
            }
            set {
                this.suidField = value;
            }
        }
        
        /// <summary>
        /// Does the program run with the gid (thus privileges) of the file's group owner, rather than the calling user's group?
        /// </summary>
        public EntityStateBoolType sgid {
            get {
                return this.sgidField;
            }
            set {
                this.sgidField = value;
            }
        }
        
        /// <summary>
        /// Can users delete each other's files in this directory, when said directory is writable by those users?
        /// </summary>
        public EntityStateBoolType sticky {
            get {
                return this.stickyField;
            }
            set {
                this.stickyField = value;
            }
        }
        
        /// <summary>
        /// Can the owner (user owner) of the file read this file or, if a directory, read the directory contents?
        /// </summary>
        public EntityStateBoolType uread {
            get {
                return this.ureadField;
            }
            set {
                this.ureadField = value;
            }
        }
        
        /// <summary>
        /// Can the owner (user owner) of the file write to this file or, if a directory, write to the directory?
        /// </summary>
        public EntityStateBoolType uwrite {
            get {
                return this.uwriteField;
            }
            set {
                this.uwriteField = value;
            }
        }
        
        /// <summary>
        /// Can the owner (user owner) of the file execute it or, if a directory, change into the directory?
        /// </summary>
        public EntityStateBoolType uexec {
            get {
                return this.uexecField;
            }
            set {
                this.uexecField = value;
            }
        }
        
        /// <summary>
        /// Can the group owner of the file read this file or, if a directory, read the directory contents?
        /// </summary>
        public EntityStateBoolType gread {
            get {
                return this.greadField;
            }
            set {
                this.greadField = value;
            }
        }
        
        /// <summary>
        /// Can the group owner of the file write to this file or, if a directory, write to the directory?
        /// </summary>
        public EntityStateBoolType gwrite {
            get {
                return this.gwriteField;
            }
            set {
                this.gwriteField = value;
            }
        }
        
        /// <summary>
        /// Can the group owner of the file execute it or, if a directory, change into the directory?
        /// </summary>
        public EntityStateBoolType gexec {
            get {
                return this.gexecField;
            }
            set {
                this.gexecField = value;
            }
        }
        
        /// <summary>
        /// Can all other users read this file or, if a directory, read the directory contents?
        /// </summary>
        public EntityStateBoolType oread {
            get {
                return this.oreadField;
            }
            set {
                this.oreadField = value;
            }
        }
        
        /// <summary>
        /// Can the other users write to this file or, if a directory, write to the directory?
        /// </summary>
        public EntityStateBoolType owrite {
            get {
                return this.owriteField;
            }
            set {
                this.owriteField = value;
            }
        }
        
        /// <summary>
        /// Can the other users execute this file or, if a directory, change into the directory?
        /// </summary>
        public EntityStateBoolType oexec {
            get {
                return this.oexecField;
            }
            set {
                this.oexecField = value;
            }
        }
        
        /// <summary>
        /// Does the file or directory have ACL permissions applied to it? If the file or directory doesn't have an ACL, or it matches the standard UNIX permissions, the value will be 'false'. Otherwise, if a file or directory has an ACL, the value will be 'true'.
        /// </summary>
        public EntityStateBoolType has_extended_acl {
            get {
                return this.has_extended_aclField;
            }
            set {
                this.has_extended_aclField = value;
            }
        }
    }
    
    /// <summary>
    /// NOTE: Solaris has a very different implementation of "extended attributes" in which the attributes are really an orthogonal directory hierarchy of files. See the Solaris documentation for more details. The file extended attribute test only handles simple name/value pairs as implemented by most other UNIX derived operating systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class fileextendedattribute_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class fileextendedattribute_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType4[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("attribute_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType4[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType4 {
        
        /// <remarks/>
        attribute_name,
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The fileextendedattribute_state element defines an extended attribute associated with a UNIX file. This includes the path, filename, attribute name, and attribute value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class fileextendedattribute_state : StateType {
        
        private EntityStateStringType filepathField;
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType attribute_nameField;
        
        private EntityStateAnySimpleType valueField;
        
        /// <summary>
        /// The filepath element specifies the absolute path for a file on the machine. A directory can be specified as a filepath.
        /// </summary>
        public EntityStateStringType filepath {
            get {
                return this.filepathField;
            }
            set {
                this.filepathField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to a file on the machine.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// The name of the file.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <summary>
        /// This is the extended attribute's name, identifier or key.
        /// </summary>
        public EntityStateStringType attribute_name {
            get {
                return this.attribute_nameField;
            }
            set {
                this.attribute_nameField = value;
            }
        }
        
        /// <summary>
        /// The value entity represents the extended attribute's value or contents. To test for an attribute with no value assigned to it, this entity would be used with an empty value.
        /// </summary>
        public EntityStateAnySimpleType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The gconf_test is used to check the attributes and value(s) associated with GConf preference keys. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a gconf_object and the optional gconf_state element specifies the data to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class gconf_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The gconf_object element is used by a gconf_test to define the preference keys to collect and the sources from which to collect the preference keys. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class gconf_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType5[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("key", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("source", typeof(EntityObjectStringType), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType5[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType5 {
        
        /// <remarks/>
        key,
        
        /// <remarks/>
        source,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The gconf_state element defines the different information that can be used to evaluate the specified GConf preference key. This includes the preference key, source, type, whether it's writable, the user who last modified it, the time it was last modified, whether it's the default value, as well as the preference key's value. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class gconf_state : StateType {
        
        private EntityStateStringType keyField;
        
        private EntityStateStringType sourceField;
        
        private EntityStateGconfTypeType typeField;
        
        private EntityStateBoolType is_writableField;
        
        private EntityStateStringType mod_userField;
        
        private EntityStateIntType mod_timeField;
        
        private EntityStateBoolType is_defaultField;
        
        private EntityStateAnySimpleType valueField;
        
        /// <summary>
        /// The preference key to check.
        /// </summary>
        public EntityStateStringType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <summary>
        /// The source used to look up the preference key.
        /// </summary>
        public EntityStateStringType source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <summary>
        /// The type of the preference key.
        /// </summary>
        public EntityStateGconfTypeType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <summary>
        /// Is the preference key writable? If true, the preference key is writable. If false, the preference key is not writable.
        /// </summary>
        public EntityStateBoolType is_writable {
            get {
                return this.is_writableField;
            }
            set {
                this.is_writableField = value;
            }
        }
        
        /// <summary>
        /// The user who last modified the preference key.
        /// </summary>
        public EntityStateStringType mod_user {
            get {
                return this.mod_userField;
            }
            set {
                this.mod_userField = value;
            }
        }
        
        /// <summary>
        /// The time the preference key was last modified in seconds since the Unix epoch. The Unix epoch is the time 00:00:00 UTC on January 1, 1970.
        /// </summary>
        public EntityStateIntType mod_time {
            get {
                return this.mod_timeField;
            }
            set {
                this.mod_timeField = value;
            }
        }
        
        /// <summary>
        /// Is the preference key value the default value. If true, the preference key value is the default value. If false, the preference key value is not the default value.
        /// </summary>
        public EntityStateBoolType is_default {
            get {
                return this.is_defaultField;
            }
            set {
                this.is_defaultField = value;
            }
        }
        
        /// <summary>
        /// The value of the preference key.
        /// </summary>
        public EntityStateAnySimpleType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The inetd test is used to check information associated with different Internet services. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an inetd_object and the optional state element specifies the information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class inetd_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// An inetd object consists of a protocol entity and a service_name entity that identifies the specific service to be tested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class inetd_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType6[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("protocol", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("service_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType6[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType6 {
        
        /// <remarks/>
        protocol,
        
        /// <remarks/>
        service_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The inetd_state element defines the different information associated with a specific Internet service. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class inetd_state : StateType {
        
        private EntityStateStringType protocolField;
        
        private EntityStateStringType service_nameField;
        
        private EntityStateStringType server_programField;
        
        private EntityStateStringType server_argumentsField;
        
        private EntityStateEndpointType endpoint_typeField;
        
        private EntityStateStringType exec_as_userField;
        
        private EntityStateWaitStatusType wait_statusField;
        
        /// <summary>
        /// A recognized protocol listed in the file /etc/inet/protocols.
        /// </summary>
        public EntityStateStringType protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <summary>
        /// The name of a valid service listed in the services file. For RPC services, the value of the service-name field consists of the RPC service name or program number, followed by a '/' (slash) and either a version number or a range of version numbers (for example, rstatd/2-4).
        /// </summary>
        public EntityStateStringType service_name {
            get {
                return this.service_nameField;
            }
            set {
                this.service_nameField = value;
            }
        }
        
        /// <summary>
        /// Either the pathname of a server program to be invoked by inetd to perform the requested service, or the value internal if inetd itself provides the service.
        /// </summary>
        public EntityStateStringType server_program {
            get {
                return this.server_programField;
            }
            set {
                this.server_programField = value;
            }
        }
        
        public EntityStateStringType server_arguments {
            get {
                return this.server_argumentsField;
            }
            set {
                this.server_argumentsField = value;
            }
        }
        
        public EntityStateEndpointType endpoint_type {
            get {
                return this.endpoint_typeField;
            }
            set {
                this.endpoint_typeField = value;
            }
        }
        
        public EntityStateStringType exec_as_user {
            get {
                return this.exec_as_userField;
            }
            set {
                this.exec_as_userField = value;
            }
        }
        
        /// <summary>
        /// This field has values wait or nowait. This entry specifies whether the server that is invoked by inetd will take over the listening socket associated with the service, and whether once launched, inetd will wait for that server to exit, if ever, before it resumes listening for new service requests.
        /// </summary>
        public EntityStateWaitStatusType wait_status {
            get {
                return this.wait_statusField;
            }
            set {
                this.wait_statusField = value;
            }
        }
    }
    
    /// <summary>
    /// The interface test enumerates various attributes about the interfaces on a system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an interface_object and the optional state element specifies the interface information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class interface_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// An interface object consists of a single name entity that identifies which interface is being specified.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class interface_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The interface_state element enumerates the different properties associate with a Unix interface. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class interface_state : StateType {
        
        private EntityStateStringType nameField;
        
        private EntityStateInterfaceType typeField;
        
        private EntityStateStringType hardware_addrField;
        
        private EntityStateIPAddressStringType inet_addrField;
        
        private EntityStateIPAddressStringType broadcast_addrField;
        
        private EntityStateIPAddressStringType netmaskField;
        
        private EntityStateStringType flagField;
        
        /// <summary>
        /// The name element is the interface (eth0, eth1, fw0, etc.) name to check.
        /// </summary>
        public EntityStateStringType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <summary>
        /// The type element specifies the type of interface.
        /// </summary>
        public EntityStateInterfaceType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <summary>
        /// The hardware_addr element is the hardware or MAC address of the physical network card. MAC addresses should be formatted according to the IEEE 802-2001 standard which states that a MAC address is a sequence of six octet values, separated by hyphens, where each octet is represented by two hexadecimal digits.  Uppercase letters should also be used to represent the hexadecimal digits A through F.
        /// </summary>
        public EntityStateStringType hardware_addr {
            get {
                return this.hardware_addrField;
            }
            set {
                this.hardware_addrField = value;
            }
        }
        
        /// <summary>
        /// This is the IP address of the interface. Note that the IP address can be IPv4 or IPv6. If the IP address is an IPv6 address, this entity will be expressed as an IPv6 address prefix using CIDR notation and the netmask entity will not be collected.
        /// </summary>
        public EntityStateIPAddressStringType inet_addr {
            get {
                return this.inet_addrField;
            }
            set {
                this.inet_addrField = value;
            }
        }
        
        /// <summary>
        /// This is the broadcast IP address for this interface's network. Note that the IP address can be IPv4 or IPv6.
        /// </summary>
        public EntityStateIPAddressStringType broadcast_addr {
            get {
                return this.broadcast_addrField;
            }
            set {
                this.broadcast_addrField = value;
            }
        }
        
        /// <summary>
        /// This is the bitmask used to calculate the interface's IP network. The network number is calculated by bitwise-ANDing this with the IP address. The host number on that network is calculated by bitwise-XORing this with the IP address.  Note that if the inet_addr entity contains an IPv6 address prefix, this entity will not be collected.
        /// </summary>
        public EntityStateIPAddressStringType netmask {
            get {
                return this.netmaskField;
            }
            set {
                this.netmaskField = value;
            }
        }
        
        /// <summary>
        /// The flag entity represents the interface flag line, which generally contains flags like "UP" to denote an active interface, "PROMISC" to note that the interface is listening for Ethernet frames not specifically addressed to it, and others. This element can be included multiple times in a system characteristic item in order to record a multitude of flags. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like this that refer to items that can occur an unbounded number of times.
        /// </summary>
        public EntityStateStringType flag {
            get {
                return this.flagField;
            }
            set {
                this.flagField = value;
            }
        }
    }
    
    /// <summary>
    /// The password test is used to check metadata associated with the UNIX password file, of the sort returned by the passwd command. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a password_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class password_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A password object consists of a single username entity that identifies the user whos passwords are to be evaluated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class password_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("username", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The password_state element defines the different information associated with the system passwords. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class password_state : StateType {
        
        private EntityStateStringType usernameField;
        
        private EntityStateStringType passwordField;
        
        private EntityStateIntType user_idField;
        
        private EntityStateIntType group_idField;
        
        private EntityStateStringType gcosField;
        
        private EntityStateStringType home_dirField;
        
        private EntityStateStringType login_shellField;
        
        public EntityStateStringType username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        public EntityStateStringType password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <summary>
        /// The numeric user id, or uid, is the third column of each user's entry in /etc/passwd. This element represents the owner of the file.
        /// </summary>
        public EntityStateIntType user_id {
            get {
                return this.user_idField;
            }
            set {
                this.user_idField = value;
            }
        }
        
        public EntityStateIntType group_id {
            get {
                return this.group_idField;
            }
            set {
                this.group_idField = value;
            }
        }
        
        public EntityStateStringType gcos {
            get {
                return this.gcosField;
            }
            set {
                this.gcosField = value;
            }
        }
        
        public EntityStateStringType home_dir {
            get {
                return this.home_dirField;
            }
            set {
                this.home_dirField = value;
            }
        }
        
        public EntityStateStringType login_shell {
            get {
                return this.login_shellField;
            }
            set {
                this.login_shellField = value;
            }
        }
    }
    
    /// <summary>
    /// The process test is used to check information found in the UNIX processes. It is equivalent to parsing the output of the ps command. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a process_object and the optional state element specifies the process information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class process_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A process object defines the command line used to start the process(es).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class process_object : ObjectType {
        
        private object itemField;
        
        [System.Xml.Serialization.XmlElementAttribute("command", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <summary>
    /// The process_state element defines the different metadata associated with a UNIX process. This includes the command line, pid, ppid, priority, and user id. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class process_state : StateType {
        
        private EntityStateStringType commandField;
        
        private EntityStateStringType exec_timeField;
        
        private EntityStateIntType pidField;
        
        private EntityStateIntType ppidField;
        
        private EntityStateIntType priorityField;
        
        private EntityStateIntType ruidField;
        
        private EntityStateStringType scheduling_classField;
        
        private EntityStateStringType start_timeField;
        
        private EntityStateStringType ttyField;
        
        private EntityStateIntType user_idField;
        
        /// <summary>
        /// The command element specifies the command/program name to check.
        /// </summary>
        public EntityStateStringType command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <summary>
        /// This is the cumulative CPU time, formatted in [DD-]HH:MM:SS where DD is the number of days when execution time is 24 hours or more.
        /// </summary>
        public EntityStateStringType exec_time {
            get {
                return this.exec_timeField;
            }
            set {
                this.exec_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the process ID of the process.
        /// </summary>
        public EntityStateIntType pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
            }
        }
        
        /// <summary>
        /// This is the process ID of the process's parent process.
        /// </summary>
        public EntityStateIntType ppid {
            get {
                return this.ppidField;
            }
            set {
                this.ppidField = value;
            }
        }
        
        /// <summary>
        /// This is the scheduling priority with which the process runs. This can be adjusted with the nice command or nice() system call.
        /// </summary>
        public EntityStateIntType priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <summary>
        /// This is the real user id which represents the user who has created the process.
        /// </summary>
        public EntityStateIntType ruid {
            get {
                return this.ruidField;
            }
            set {
                this.ruidField = value;
            }
        }
        
        /// <summary>
        /// A platform specific characteristic maintained by the scheduler: RT (real-time), TS (timeshare), FF (fifo), SYS (system), etc.
        /// </summary>
        public EntityStateStringType scheduling_class {
            get {
                return this.scheduling_classField;
            }
            set {
                this.scheduling_classField = value;
            }
        }
        
        /// <summary>
        /// This is the time of day the process started formatted in HH:MM:SS if the same day the process started or formatted as MMM_DD (Ex.: Feb_5) if process started the previous day or further in the past.
        /// </summary>
        public EntityStateStringType start_time {
            get {
                return this.start_timeField;
            }
            set {
                this.start_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the TTY on which the process was started, if applicable.
        /// </summary>
        public EntityStateStringType tty {
            get {
                return this.ttyField;
            }
            set {
                this.ttyField = value;
            }
        }
        
        /// <summary>
        /// This is the effective user id which represents the actual privileges of the process.
        /// </summary>
        public EntityStateIntType user_id {
            get {
                return this.user_idField;
            }
            set {
                this.user_idField = value;
            }
        }
    }
    
    /// <summary>
    /// The process58_test is used to check information found in the UNIX processes. It is equivalent to parsing the output of the ps command. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a process58_object and the optional state element references a process58_state that specifies the process information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class process58_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A process58_object defines the command line used to start the process(es) and pid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class process58_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("command_line", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("pid", typeof(EntityObjectIntType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The process58_state element defines the different metadata associated with a UNIX process. This includes the command line, pid, ppid, priority, and user id. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class process58_state : StateType {
        
        private EntityStateStringType command_lineField;
        
        private EntityStateStringType exec_timeField;
        
        private EntityStateIntType pidField;
        
        private EntityStateIntType ppidField;
        
        private EntityStateIntType priorityField;
        
        private EntityStateIntType ruidField;
        
        private EntityStateStringType scheduling_classField;
        
        private EntityStateStringType start_timeField;
        
        private EntityStateStringType ttyField;
        
        private EntityStateIntType user_idField;
        
        private EntityStateBoolType exec_shieldField;
        
        private EntityStateIntType loginuidField;
        
        private EntityStateCapabilityType posix_capabilityField;
        
        private EntityStateStringType selinux_domain_labelField;
        
        private EntityStateIntType session_idField;
        
        /// <summary>
        /// This is the string used to start the process. This includes any parameters that are part of the command line.
        /// </summary>
        public EntityStateStringType command_line {
            get {
                return this.command_lineField;
            }
            set {
                this.command_lineField = value;
            }
        }
        
        /// <summary>
        /// This is the cumulative CPU time, formatted in [DD-]HH:MM:SS where DD is the number of days when execution time is 24 hours or more.
        /// </summary>
        public EntityStateStringType exec_time {
            get {
                return this.exec_timeField;
            }
            set {
                this.exec_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the process ID of the process.
        /// </summary>
        public EntityStateIntType pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
            }
        }
        
        /// <summary>
        /// This is the process ID of the process's parent process.
        /// </summary>
        public EntityStateIntType ppid {
            get {
                return this.ppidField;
            }
            set {
                this.ppidField = value;
            }
        }
        
        /// <summary>
        /// This is the scheduling priority with which the process runs. This can be adjusted with the nice command or nice() system call.
        /// </summary>
        public EntityStateIntType priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <summary>
        /// This is the real user id which represents the user who has created the process.
        /// </summary>
        public EntityStateIntType ruid {
            get {
                return this.ruidField;
            }
            set {
                this.ruidField = value;
            }
        }
        
        /// <summary>
        /// A platform specific characteristic maintained by the scheduler: RT (real-time), TS (timeshare), FF (fifo), SYS (system), etc.
        /// </summary>
        public EntityStateStringType scheduling_class {
            get {
                return this.scheduling_classField;
            }
            set {
                this.scheduling_classField = value;
            }
        }
        
        /// <summary>
        /// This is the time of day the process started formatted in HH:MM:SS if the same day the process started or formatted as MMM_DD (Ex.: Feb_5) if process started the previous day or further in the past.
        /// </summary>
        public EntityStateStringType start_time {
            get {
                return this.start_timeField;
            }
            set {
                this.start_timeField = value;
            }
        }
        
        /// <summary>
        /// This is the TTY on which the process was started, if applicable.
        /// </summary>
        public EntityStateStringType tty {
            get {
                return this.ttyField;
            }
            set {
                this.ttyField = value;
            }
        }
        
        /// <summary>
        /// This is the effective user id which represents the actual privileges of the process.
        /// </summary>
        public EntityStateIntType user_id {
            get {
                return this.user_idField;
            }
            set {
                this.user_idField = value;
            }
        }
        
        /// <summary>
        /// A boolean that when true would indicates that ExecShield is enabled for the process.
        /// </summary>
        public EntityStateBoolType exec_shield {
            get {
                return this.exec_shieldField;
            }
            set {
                this.exec_shieldField = value;
            }
        }
        
        /// <summary>
        /// The loginuid shows which account a user gained access to the system with. The /proc/XXXX/loginuid shows this value.
        /// </summary>
        public EntityStateIntType loginuid {
            get {
                return this.loginuidField;
            }
            set {
                this.loginuidField = value;
            }
        }
        
        /// <summary>
        /// An effective capability associated with the process. See linux/include/linux/capability.h for more information.
        /// </summary>
        public EntityStateCapabilityType posix_capability {
            get {
                return this.posix_capabilityField;
            }
            set {
                this.posix_capabilityField = value;
            }
        }
        
        /// <summary>
        /// An selinux domain label associated with the process.
        /// </summary>
        public EntityStateStringType selinux_domain_label {
            get {
                return this.selinux_domain_labelField;
            }
            set {
                this.selinux_domain_labelField = value;
            }
        }
        
        /// <summary>
        /// The session ID of the process.
        /// </summary>
        public EntityStateIntType session_id {
            get {
                return this.session_idField;
            }
            set {
                this.session_idField = value;
            }
        }
    }
    
    /// <summary>
    /// The routingtable_test is used to check information about the IPv4 and IPv6 routing table entries found in a system's primary routing table. It is important to note that only numerical addresses will be collected and that their symbolic representations will not be resolved. This equivalent to using the '-n' option with route(8) or netstat(8). It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a routingtable_object and the optional routingtable_state element specifies the data to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class routingtable_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The routingtable_object element is used by a routingtable_test to define the destination IP address(es), found in a system's primary routing table, to collect. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class routingtable_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("destination", typeof(EntityObjectIPAddressType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The routingtable_state element defines the different information that can be used to check an entry found in a system's primary routing table. This includes the destination IP address, gateway, netmask, flags, and the name of the interface associated with it. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class routingtable_state : StateType {
        
        private EntityStateIPAddressType destinationField;
        
        private EntityStateIPAddressType gatewayField;
        
        private EntityStateRoutingTableFlagsType flagsField;
        
        private EntityStateStringType interface_nameField;
        
        /// <summary>
        /// The destination IP address prefix of the routing table entry. This is the destination IP address and netmask/prefix-length expressed using CIDR notation.
        /// </summary>
        public EntityStateIPAddressType destination {
            get {
                return this.destinationField;
            }
            set {
                this.destinationField = value;
            }
        }
        
        /// <summary>
        /// The gateway of the specified routing table entry.
        /// </summary>
        public EntityStateIPAddressType gateway {
            get {
                return this.gatewayField;
            }
            set {
                this.gatewayField = value;
            }
        }
        
        /// <summary>
        /// The flags associated with the specified routing table entry.
        /// </summary>
        public EntityStateRoutingTableFlagsType flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        /// <summary>
        /// The name of the interface associated with the routing table entry.
        /// </summary>
        public EntityStateStringType interface_name {
            get {
                return this.interface_nameField;
            }
            set {
                this.interface_nameField = value;
            }
        }
    }
    
    /// <summary>
    /// The runlevel test is used to check information about which runlevel specified service are scheduled to exist at. For more information see the output generated by a chkconfig --list. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a runlevel_object and the optional state element specifies the data to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class runlevel_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The runlevel_object element is used by a runlevel_test to define the specific service(s)/runlevel combination to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class runlevel_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType7[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("runlevel", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("service_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType7[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType7 {
        
        /// <remarks/>
        runlevel,
        
        /// <remarks/>
        service_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The runlevel_state element holds information about whether a specific service is schedule to start or kill at a given runlevel. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class runlevel_state : StateType {
        
        private EntityStateStringType service_nameField;
        
        private EntityStateStringType runlevelField;
        
        private EntityStateBoolType startField;
        
        private EntityStateBoolType killField;
        
        /// <summary>
        /// The service_name entity refers the name associated with a service. This name is usually the filename of the script file located in /etc/init.d directory.
        /// </summary>
        public EntityStateStringType service_name {
            get {
                return this.service_nameField;
            }
            set {
                this.service_nameField = value;
            }
        }
        
        /// <summary>
        /// The runlevel entity refers to which runlevel a system is at. A runlevel is defined as a software configuration of the system that allows only a selected group of processes to exist.
        /// </summary>
        public EntityStateStringType runlevel {
            get {
                return this.runlevelField;
            }
            set {
                this.runlevelField = value;
            }
        }
        
        /// <summary>
        /// The start entity determines if the process is scheduled to be spawned at the specified runlevel.
        /// </summary>
        public EntityStateBoolType start {
            get {
                return this.startField;
            }
            set {
                this.startField = value;
            }
        }
        
        /// <summary>
        /// The kill entity determines if the proces is supposed to be killed at the specified runlevel.
        /// </summary>
        public EntityStateBoolType kill {
            get {
                return this.killField;
            }
            set {
                this.killField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class sccs_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// It is important to note that the 'max_depth' and 'recurse_direction' attributes of the 'behaviors' element do not apply to the 'filepath' element, only to the 'path' and 'filename' elements.  This is because the 'filepath' element represents an absolute path to a particular file and it is not possible to recurse over a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class sccs_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType8[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("behaviors", typeof(FileBehaviors))]
        [System.Xml.Serialization.XmlElementAttribute("filename", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filepath", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("path", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType8[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType8 {
        
        /// <remarks/>
        behaviors,
        
        /// <remarks/>
        filename,
        
        /// <remarks/>
        filepath,
        
        /// <remarks/>
        path,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class sccs_state : StateType {
        
        private EntityStateStringType filepathField;
        
        private EntityStateStringType pathField;
        
        private EntityStateStringType filenameField;
        
        private EntityStateStringType module_nameField;
        
        private EntityStateStringType module_typeField;
        
        private EntityStateStringType releaseField;
        
        private EntityStateStringType levelField;
        
        private EntityStateStringType branchField;
        
        private EntityStateStringType sequenceField;
        
        private EntityStateStringType what_stringField;
        
        /// <summary>
        /// The filepath element specifies the absolute path for a file on the machine. A directory cannot be specified as a filepath.
        /// </summary>
        public EntityStateStringType filepath {
            get {
                return this.filepathField;
            }
            set {
                this.filepathField = value;
            }
        }
        
        /// <summary>
        /// The path element specifies the directory component of the absolute path to an SCCS file.
        /// </summary>
        public EntityStateStringType path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <summary>
        /// This is the name of a SCCS file.
        /// </summary>
        public EntityStateStringType filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        public EntityStateStringType module_name {
            get {
                return this.module_nameField;
            }
            set {
                this.module_nameField = value;
            }
        }
        
        public EntityStateStringType module_type {
            get {
                return this.module_typeField;
            }
            set {
                this.module_typeField = value;
            }
        }
        
        public EntityStateStringType release {
            get {
                return this.releaseField;
            }
            set {
                this.releaseField = value;
            }
        }
        
        public EntityStateStringType level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        public EntityStateStringType branch {
            get {
                return this.branchField;
            }
            set {
                this.branchField = value;
            }
        }
        
        public EntityStateStringType sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        public EntityStateStringType what_string {
            get {
                return this.what_stringField;
            }
            set {
                this.what_stringField = value;
            }
        }
    }
    
    /// <summary>
    /// The shadow test is used to check information from the /etc/shadow file for a specific user. This file contains a user's password, but also their password aging and lockout information. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an shadow_object and the optional state element specifies the information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class shadow_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// A shdow object consists of a single user entity that identifies the username associted with the shadow file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class shadow_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("username", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The shadows_state element defines the different information associated with the system shadow file. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class shadow_state : StateType {
        
        private EntityStateStringType usernameField;
        
        private EntityStateStringType passwordField;
        
        private EntityStateIntType chg_lstField;
        
        private EntityStateIntType chg_allowField;
        
        private EntityStateIntType chg_reqField;
        
        private EntityStateIntType exp_warnField;
        
        private EntityStateIntType exp_inactField;
        
        private EntityStateIntType exp_dateField;
        
        private EntityStateStringType flagField;
        
        private EntityStateEncryptMethodType encrypt_methodField;
        
        /// <summary>
        /// This is the name of the user being checked.
        /// </summary>
        public EntityStateStringType username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <summary>
        /// This is the encrypted version of the user's password.
        /// </summary>
        public EntityStateStringType password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <summary>
        /// This is the date of the last password change in days since 1/1/1970.
        /// </summary>
        public EntityStateIntType chg_lst {
            get {
                return this.chg_lstField;
            }
            set {
                this.chg_lstField = value;
            }
        }
        
        /// <summary>
        /// This specifies how often in days a user may change their password. It can also be thought of as the minimum age of a password.
        /// </summary>
        public EntityStateIntType chg_allow {
            get {
                return this.chg_allowField;
            }
            set {
                this.chg_allowField = value;
            }
        }
        
        /// <summary>
        /// This describes how long a user can keep a password before the system forces her to change it.
        /// </summary>
        public EntityStateIntType chg_req {
            get {
                return this.chg_reqField;
            }
            set {
                this.chg_reqField = value;
            }
        }
        
        /// <summary>
        /// This describes how long before password expiration the system begins warning the user. The system will warn the user at each login.
        /// </summary>
        public EntityStateIntType exp_warn {
            get {
                return this.exp_warnField;
            }
            set {
                this.exp_warnField = value;
            }
        }
        
        /// <summary>
        /// The exp_inact entity describes how many days of account inactivity the system will wait after a password expires before locking the account. Unix systems are generally configured to only allow a given password to last for a fixed period of time. When this time, the chg_req parameter, is near running out, the system begins warning the user at each login. How soon before the expiration the user receives these warnings is specified in exp_warn. The only hiccup in this design is that a user may not login in time to ever receive a warning before account expiration. The exp_inact parameter gives the sysadmin flexibility so that a user who reaches the end of their expiration time gains exp_inact more days to login and change their password manually.
        /// </summary>
        public EntityStateIntType exp_inact {
            get {
                return this.exp_inactField;
            }
            set {
                this.exp_inactField = value;
            }
        }
        
        /// <summary>
        /// This specifies when will the account's password expire, in days since 1/1/1970.
        /// </summary>
        public EntityStateIntType exp_date {
            get {
                return this.exp_dateField;
            }
            set {
                this.exp_dateField = value;
            }
        }
        
        /// <summary>
        /// This is a reserved field that the shadow file may use in the future.
        /// </summary>
        public EntityStateStringType flag {
            get {
                return this.flagField;
            }
            set {
                this.flagField = value;
            }
        }
        
        /// <summary>
        /// The encrypt_method entity describes method that is used for hashing passwords.
        /// </summary>
        public EntityStateEncryptMethodType encrypt_method {
            get {
                return this.encrypt_methodField;
            }
            set {
                this.encrypt_methodField = value;
            }
        }
    }
    
    /// <summary>
    /// The sysctl_test is used to check the values associated with the kernel parameters that are used by the local system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sysctl_object and the optional state element references a sysctl_state that specifies the information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class sysctl_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The sysctl_object is used by a sysctl_test to define which kernel parameters on the local system should be collected. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class sysctl_object : ObjectType {
        
        private object[] itemsField;
        
        [System.Xml.Serialization.XmlElementAttribute("name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <summary>
    /// The sysctl_state contains two entities that are used to check the kernel parameter name and value(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class sysctl_state : StateType {
        
        private EntityStateStringType nameField;
        
        private EntityStateAnySimpleType valueField;
        
        /// <summary>
        /// The name element contains a string that represents the name of a kernel parameter that was collected from the local system.
        /// </summary>
        public EntityStateStringType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <summary>
        /// The value element contains a string that represents the value(s) associated with the specified kernel parameter.
        /// </summary>
        public EntityStateAnySimpleType value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// The uname test reveals information about the hardware the machine is running on. This information is the parsed equivalent of uname -a. For example: "Linux quark 2.6.5-7.108-default #1 Wed Aug 25 13:34:40 UTC 2004 i686 i686 i386 GNU/Linux" or "Darwin TestHost 7.7.0 Darwin Kernel Version 7.7.0: Sun Nov 7 16:06:51 PST 2004; root:xnu/xnu-517.9.5.obj~1/RELEASE_PPC Power Macintosh powerpc". It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a uname_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class uname_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// The uname_object element is used by an uname test to define those objects to evaluated based on a specified state. There is actually only one object relating to uname and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check uname will reference the same uname_object which is basically an empty object element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class uname_object : ObjectType {
    }
    
    /// <summary>
    /// The uname_state element defines the information about the hardware the machine is running one. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class uname_state : StateType {
        
        private EntityStateStringType machine_classField;
        
        private EntityStateStringType node_nameField;
        
        private EntityStateStringType os_nameField;
        
        private EntityStateStringType os_releaseField;
        
        private EntityStateStringType os_versionField;
        
        private EntityStateStringType processor_typeField;
        
        /// <summary>
        /// This entity specifies a machine hardware name. This corresponds to the command uname -m.
        /// </summary>
        public EntityStateStringType machine_class {
            get {
                return this.machine_classField;
            }
            set {
                this.machine_classField = value;
            }
        }
        
        /// <summary>
        /// This entity specifies a host name. This corresponds to the command uname -n.
        /// </summary>
        public EntityStateStringType node_name {
            get {
                return this.node_nameField;
            }
            set {
                this.node_nameField = value;
            }
        }
        
        /// <summary>
        /// This entity specifies an operating system name. This corresponds to the command uname -s.
        /// </summary>
        public EntityStateStringType os_name {
            get {
                return this.os_nameField;
            }
            set {
                this.os_nameField = value;
            }
        }
        
        /// <summary>
        /// This entity specifies a build version. This corresponds to the command uname -r.
        /// </summary>
        public EntityStateStringType os_release {
            get {
                return this.os_releaseField;
            }
            set {
                this.os_releaseField = value;
            }
        }
        
        /// <summary>
        /// This entity specifies an operating system version. This corresponds to the command uname -v.
        /// </summary>
        public EntityStateStringType os_version {
            get {
                return this.os_versionField;
            }
            set {
                this.os_versionField = value;
            }
        }
        
        /// <summary>
        /// This entity specifies a processor type. This corresponds to the command uname -p.
        /// </summary>
        public EntityStateStringType processor_type {
            get {
                return this.processor_typeField;
            }
            set {
                this.processor_typeField = value;
            }
        }
    }
    
    /// <summary>
    /// The xinetd test is used to check information associated with different Internet services. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an inetd_object and the optional state element specifies the information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class xinetd_test : TestType {
        
        private ObjectRefType objectField;
        
        private StateRefType[] stateField;
        
        public ObjectRefType @object {
            get {
                return this.objectField;
            }
            set {
                this.objectField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state")]
        public StateRefType[] state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <summary>
    /// An xinetd object consists of a protocol entity and a service_name entity that identifies the specific service to be tested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class xinetd_object : ObjectType {
        
        private object[] itemsField;
        
        private ItemsChoiceType9[] itemsElementNameField;
        
        [System.Xml.Serialization.XmlElementAttribute("protocol", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("service_name", typeof(EntityObjectStringType))]
        [System.Xml.Serialization.XmlElementAttribute("filter", typeof(filter), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlElementAttribute("set", typeof(set), Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType9[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IncludeInSchema=false)]
    public enum ItemsChoiceType9 {
        
        /// <remarks/>
        protocol,
        
        /// <remarks/>
        service_name,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:filter")]
        filter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://oval.mitre.org/XMLSchema/oval-definitions-5:set")]
        set,
    }
    
    /// <summary>
    /// The xinetd_state element defines the different information associated with a specific Internet service. Please refer to the individual elements in the schema for more details about what each represents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.5.0.14895")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix", IsNullable=false)]
    public partial class xinetd_state : StateType {
        
        private EntityStateStringType protocolField;
        
        private EntityStateStringType service_nameField;
        
        private EntityStateStringType flagsField;
        
        private EntityStateStringType no_accessField;
        
        private EntityStateIPAddressStringType only_fromField;
        
        private EntityStateIntType portField;
        
        private EntityStateStringType serverField;
        
        private EntityStateStringType server_argumentsField;
        
        private EntityStateStringType socket_typeField;
        
        private EntityStateXinetdTypeStatusType typeField;
        
        private EntityStateStringType userField;
        
        private EntityStateBoolType waitField;
        
        private EntityStateBoolType disabledField;
        
        /// <summary>
        /// A recognized protocol.
        /// </summary>
        public EntityStateStringType protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <summary>
        /// The name of a valid service.
        /// </summary>
        public EntityStateStringType service_name {
            get {
                return this.service_nameField;
            }
            set {
                this.service_nameField = value;
            }
        }
        
        public EntityStateStringType flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        public EntityStateStringType no_access {
            get {
                return this.no_accessField;
            }
            set {
                this.no_accessField = value;
            }
        }
        
        public EntityStateIPAddressStringType only_from {
            get {
                return this.only_fromField;
            }
            set {
                this.only_fromField = value;
            }
        }
        
        public EntityStateIntType port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        public EntityStateStringType server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        public EntityStateStringType server_arguments {
            get {
                return this.server_argumentsField;
            }
            set {
                this.server_argumentsField = value;
            }
        }
        
        public EntityStateStringType socket_type {
            get {
                return this.socket_typeField;
            }
            set {
                this.socket_typeField = value;
            }
        }
        
        public EntityStateXinetdTypeStatusType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        public EntityStateStringType user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        public EntityStateBoolType wait {
            get {
                return this.waitField;
            }
            set {
                this.waitField = value;
            }
        }
        
        public EntityStateBoolType disabled {
            get {
                return this.disabledField;
            }
            set {
                this.disabledField = value;
            }
        }
    }
}
