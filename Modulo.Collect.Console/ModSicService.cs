using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Modulo.Collect.Service.Client;
using Modulo.Collect.Service.Client.Internal;
using Modulo.Collect.Service.Contract;
using System.Threading;

namespace Modulo.Collect.ClientConsole
{
    public class ModSicService
    {
        private char[] StatusChar;

        private const string SEND_COLLECT_ERROR = "The request collect was send, but an error was returned by the server: '{0}'";

        private const string COLLECT_REQUEST_ID_CANNOT_BE_NULL = "The collect request ID argument cannot be null or empty.";

        private ModSicConnection _modSicConnection;

        public Version ServerProgramVersion
        {
            get
            {
                if (_modSicConnection == null)
                    return null;
                return _modSicConnection.ServerProgramVersion;
            }
        }
        public APIVersion ServerAPIVersion
        {
            get
            {
                if (_modSicConnection == null)
                    return null;
                return _modSicConnection.ServerAPIVersion;
            }
        }


        public ModSicService(CollectServerParameters modSicServerParameters)
        {
            CreateStatusCharArray();
            this._modSicConnection =
                new ModSicConnection(
                    modSicServerParameters.Address,
                    modSicServerParameters.Username,
                    modSicServerParameters.Password,
                    modSicServerParameters.ClientId);
        }

        /// <summary>
        /// Only for unit tests purposes
        /// </summary>
        /// <param name="connectionMock">An instance of ModSicConnection with mock behavior.</param>
        public ModSicService(ModSicConnection connectionMock)
        {
            CreateStatusCharArray();
            this._modSicConnection = connectionMock;
        }

        public virtual Dictionary<String, String> SendCollect(
            string targetAddres, Credential credentials, string ovalDefinitions, string externalVariables = null)
        {
            return TryToRequestCollect(targetAddres, credentials, ovalDefinitions, externalVariables);
        }

        public virtual String SendCollectSynchronous(
            string targetAddres,
            Credential credentials, 
            string ovalDefinitions,
            out string collectRequestID,
            int poolingIntervalInSecs = 30,
            string externalVariables = null)
        {
            var sendCollectResult =
                TryToRequestCollect(targetAddres, credentials, ovalDefinitions, externalVariables);

            collectRequestID = sendCollectResult.First().Value;

            Console.WriteLine("Collect was requested successfully.");
            Console.WriteLine("Request Collect ID generated by modSIC: {0}", collectRequestID);
            Console.WriteLine("Collecting data on {0}...", targetAddres);
            
            var progressThread = new System.Threading.Thread(new System.Threading.ThreadStart(this.Progress));
            progressThread.Start();
            try
            {
                string lastReschedStr = "";
                while (true)
                {
                    if (poolingIntervalInSecs > 0)
                        System.Threading.Thread.Sleep(poolingIntervalInSecs * 1000);

                    var statusString = this.IsCollectInExecution(collectRequestID);
                    if (string.IsNullOrEmpty(statusString))
                    {
                        progressThread.Abort();
                        Console.WriteLine("The collect has finished.");
                        Console.WriteLine("Trying to get Oval Results...");
                        progressThread = new Thread(new ThreadStart(this.Progress));
                        progressThread.Start();
                        var retVal = _modSicConnection.GetOvalResults(collectRequestID);
                        progressThread.Abort();
                        //Console.Write("\b");
                        return retVal;
                    }

                    var reschedString = "(" + CollectRequestStatus.Open.ToString() + ") ";
                    var foundResched = statusString.IndexOf(reschedString);
                    if (foundResched >= 0)
                    {
                        statusString = statusString.Substring(foundResched + reschedString.Length);
                        if (statusString != lastReschedStr)
                        {
                            Console.WriteLine("Rescheduled. " + statusString);
                            lastReschedStr = statusString;
                        }
                    }
                    else
                    {
                        if (!String.IsNullOrEmpty(lastReschedStr))
                        {
                            Console.WriteLine("Collect resumed.");
                        }
                        lastReschedStr = "";
                    }
                }
            }
            finally
            {
                progressThread.Abort();
            }
        }

        public void Progress()
        {
            int i = 0;
            while (true)
            {
                System.Threading.Thread.Sleep(1000);
                //Console.Write("\b");
                if (i < StatusChar.Count())
                    Console.Write(StatusChar[i]);
                i++;
                if (i >= StatusChar.Count())
                    i = 0;
            }
        }

        public virtual String GetOvalResults(string collectRequestID)
        {
            this.CheckCollectRequestID(collectRequestID);
            try
            {
                return _modSicConnection.GetOvalResults(collectRequestID);
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }
        }

        public virtual Result GetResultDocument(string collectRequestID)
        {
            this.CheckCollectRequestID(collectRequestID);
            try
            {
                return _modSicConnection.GetResultDocument(collectRequestID);
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }
        }

        public virtual bool CancelCollect(string collectRequestID)
        {
            this.CheckCollectRequestID(collectRequestID);
            try
            {
                return _modSicConnection.CancelCollect(collectRequestID);
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }
        }

        public virtual Dictionary<String, String> GetCollectionsInExecution(bool verbose)
        {
            try
            {
                if (verbose)
                    return _modSicConnection.GetCollectionsInExecution().ToDictionary(c => c.CollectRequestId,
                        c => c.Address + " (" + c.Status.ToString() + ")" + ((c.Status == CollectRequestStatus.Open) ? " Starts " + TimeZone.CurrentTimeZone.ToLocalTime(c.StartTime).ToString() : ""));
                else
                    return _modSicConnection.GetCollectionsInExecution().ToDictionary(c => c.CollectRequestId, c => c.Address);
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }
        }

        public virtual Dictionary<String, String> GetAllCollectionsInExecution(bool verbose)
        {
            try
            {
                return _modSicConnection.GetAllCollectionsInExecution().ToDictionary(c => c.CollectRequestId,
                    c => c.Address + " by " + c.ClientId + " (" + c.Status.ToString() + ")" + ((c.Status == CollectRequestStatus.Open) ? " Starts " + TimeZone.CurrentTimeZone.ToLocalTime(c.StartTime).ToString() : ""));
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }
        }

        public virtual byte[] GetCertificate()
        {
            try
            {
                return _modSicConnection.GetCertificate();
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }
        }



        private Dictionary<String, String> TryToRequestCollect(
            string targetAddres, Credential credentials, string ovalDefinitions, string externalVariables = null)
        {
            SendRequestResult requestResult = null;
            try
            {
                requestResult = _modSicConnection.SendCollect(targetAddres, credentials, ovalDefinitions, externalVariables);
            }
            catch (Exception ex)
            {
                throw new ModSicCallingException(ex.Message);
            }

            if (requestResult.HasErrors)
                throw new ModSicCallingException(requestResult.Message);

            return requestResult.Requests.ToDictionary(r => r.ClientRequestId, r => r.ServiceRequestId);
        }

        private void CheckCollectRequestID(string collectRequestID)
        {
            if (String.IsNullOrEmpty(collectRequestID))
                throw new ArgumentNullException(COLLECT_REQUEST_ID_CANNOT_BE_NULL);
        }

        private string IsCollectInExecution(string collectRequestID)
        {
            var collectionsInExecution = this.GetCollectionsInExecution(true);
                /*.Select(collection => collection.Key); */
            var requestedCollect = collectionsInExecution
                .Where(collection => collection.Key.Equals(collectRequestID))
                .Select(collection => collection.Value);

            if (requestedCollect.Count() > 0)
                return requestedCollect.First();
            else
                return null;
        }

        private void CreateStatusCharArray()
        {
            this.StatusChar = new char[] { '|', '/', '-', '\\' };
        }
    }
}

